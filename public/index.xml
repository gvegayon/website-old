<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>GGVY on GGVY</title>
    <link>/</link>
    <description>Recent content in GGVY on GGVY</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2016 George G. Vega Yon</copyright>
    <lastBuildDate>Wed, 20 Apr 2016 00:00:00 +0000</lastBuildDate>
    <atom:link href="/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Small network statistics for the network science of teams</title>
      <link>/talk/netscix2019/</link>
      <pubDate>Thu, 03 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>/talk/netscix2019/</guid>
      <description>&lt;p&gt;Joint work with Kayla de la Haye.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Redes y Econometria Espacial con R</title>
      <link>/talk/redes-estadisticas2018/</link>
      <pubDate>Thu, 20 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>/talk/redes-estadisticas2018/</guid>
      <description>&lt;p&gt;This was my first time talking about Statistical models for network analysis and spatial econometrics in my native language (spanish).&lt;/p&gt;

&lt;p&gt;This very same workshop was taught during December 2018 and January 2019 at:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Instituto Milenio Fundamento de los datos, Universidad Católica de Chile.&lt;/li&gt;
&lt;li&gt;Centro de Investigación en Complejidad Social (CISC), Universidad del Desarrollo.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Another version of my talk can be found &lt;a href=&#34;https://www.facebook.com/complejidadsocial/videos/2217254995005631/&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Computacion de Alto Rendimiento con R</title>
      <link>/talk/satrday-scl2018/</link>
      <pubDate>Wed, 12 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>/talk/satrday-scl2018/</guid>
      <description>&lt;p&gt;This was my first time talking about HPC with R in my native language (spanish).&lt;/p&gt;

&lt;p&gt;This very same workshop was taught during December 2018 and January 2019 at:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The SatRdays conference in Santiago de Chile (organized by my friends at the &lt;a href=&#34;https://www.meetup.com/useRchile/&#34; target=&#34;_blank&#34;&gt;R Users Group in SCL&lt;/a&gt; and R &lt;a href=&#34;https://www.meetup.com/rladies-scl/&#34; target=&#34;_blank&#34;&gt;Ladies in SCL&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;Instituto Milenio para el Fundamento de los Datos at Universidad Católica de Chile (&lt;a href=&#34;https://imfd.cl&#34; target=&#34;_blank&#34;&gt;website&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;Núcleo Milenio para el estudio del curso de vida y vulnerabilidad at Universidad de Santiago de Chile (folks there were very nice and wrote two news articles based on my talk: &lt;a href=&#34;http://economia.usach.cl/index.php/noticias-blog/81-taller-computacion-de-alto-rendimiento-en-r&#34; target=&#34;_blank&#34;&gt;one&lt;/a&gt;  and &lt;a href=&#34;http://mliv.cl/2019/01/23/mliv-capacita-a-estudiantes-de-postgrado-investigadores-y-academicos-en-r/&#34; target=&#34;_blank&#34;&gt;two&lt;/a&gt;).&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Computacion de Alto Rendimiento con R</title>
      <link>/talk/satrday-scl2018.utf8/</link>
      <pubDate>Wed, 12 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>/talk/satrday-scl2018.utf8/</guid>
      <description>&lt;p&gt;This was my first time talking about HPC with R in my native language (spanish).&lt;/p&gt;

&lt;p&gt;This very same workshop was taught during December 2018 and January 2019 at:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The SatRdays conference in Santiago de Chile (organized by my friends at the &lt;a href=&#34;https://www.meetup.com/useRchile/&#34; target=&#34;_blank&#34;&gt;R Users Group in SCL&lt;/a&gt; and R &lt;a href=&#34;https://www.meetup.com/rladies-scl/&#34; target=&#34;_blank&#34;&gt;Ladies in SCL&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;Instituto Milenio para el Fundamento de los Datos (at Universidad Católica de Chile).&lt;/li&gt;
&lt;li&gt;Núcleo Milenio para el estudio del curso de vida y vulnerabilidad (at Universidad de Santiago de Chile) (folks there were very nice and wrote two news articles based on my talk &lt;a href=&#34;http://economia.usach.cl/index.php/noticias-blog/81-taller-computacion-de-alto-rendimiento-en-r&#34; target=&#34;_blank&#34;&gt;one&lt;/a&gt;  and &lt;a href=&#34;http://mliv.cl/2019/01/23/mliv-capacita-a-estudiantes-de-postgrado-investigadores-y-academicos-en-r/&#34; target=&#34;_blank&#34;&gt;two&lt;/a&gt;).&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Big Problems for Small Networks: Small Network Statistics</title>
      <link>/talk/nasn2018/</link>
      <pubDate>Thu, 29 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>/talk/nasn2018/</guid>
      <description>&lt;p&gt;Joint work with Kayla de la Haye.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Overview of Social Network Models</title>
      <link>/talk/usccais-sep2018/</link>
      <pubDate>Wed, 12 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>/talk/usccais-sep2018/</guid>
      <description></description>
    </item>
    
    <item>
      <title>R Bootcamp for Scientific Computing</title>
      <link>/talk/rbootcamp-2018/</link>
      <pubDate>Mon, 13 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>/talk/rbootcamp-2018/</guid>
      <description>&lt;p&gt;This 5-day bootcamp was held at USC&amp;rsquo;s Department of Preventive medicine jointly with &lt;a href=&#34;https://malco.io&#34; target=&#34;_blank&#34;&gt;Malcolm Barrett&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Workshop: Introduction to R (for HPC users)</title>
      <link>/talk/intro-2-r-4-hpc-users-2018/</link>
      <pubDate>Tue, 07 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>/talk/intro-2-r-4-hpc-users-2018/</guid>
      <description>&lt;p&gt;The presentation source code can be found &lt;a href=&#34;https://github.com/gvegayon/software-dev/tree/master/happy_scientist/parallel_computing&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The &#39;Happy Scientist&#39; Workshop #1: An introduction to high-performance computing using R</title>
      <link>/talk/hpc-in-r-2018/</link>
      <pubDate>Thu, 29 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>/talk/hpc-in-r-2018/</guid>
      <description>&lt;p&gt;This talk was jointly with Garrett Weaver. The presentation source code can be found &lt;a href=&#34;https://github.com/gvegayon/software-dev/tree/master/happy_scientist/parallel_computing&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Working with sparse matrices in C&#43;&#43;</title>
      <link>/post/working-with-sparse-matrices-in-cpp/</link>
      <pubDate>Tue, 16 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/working-with-sparse-matrices-in-cpp/</guid>
      <description>&lt;p&gt;Working with sparse matrices is a big part of my day. Social networks are inherently sparse, so sparse matrices are the best buds you can get when representing large networks as adjacency matrices.&lt;a href=&#34;#fn1&#34; class=&#34;footnoteRef&#34; id=&#34;fnref1&#34;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; As so, I usually find myself trying to take advantage of their structure as, contrasting dense matrices, we don’t need to write nested &lt;code&gt;for(i...) for (j...)&lt;/code&gt; loops to work with them, instead, sometimes all what we want is just to extract/work with its non-zero elements.&lt;/p&gt;
&lt;p&gt;About a year ago, while working on &lt;a href=&#34;https://github.com/USCCANA/netdiffuseR&#34;&gt;netdiffuseR&lt;/a&gt;, I was struggling a bit to write down an efficient way of iterating through non-zero elements. Right after writing my own function to return the position of non-zero elements, I wrote &lt;a href=&#34;http://conradsanderson.id.au/&#34;&gt;Dr Conrad Sanderson&lt;/a&gt;–one of the masterminds behind armadillo–and learned that a nice solution for this was already included in armadillo, &lt;a href=&#34;http://arma.sourceforge.net/docs.html#iterators_mat&#34;&gt;matrix iterators&lt;/a&gt;.&lt;/p&gt;
&lt;div id=&#34;a-simple-example&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;A simple example&lt;/h2&gt;
&lt;p&gt;First off, to work with iterators for sparse matrices we will look at the simplest example: extracting positions and values from the matrix.&lt;/p&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;RcppArmadillo.h&amp;gt;
// [[Rcpp::depends(RcppArmadillo)]]

using namespace Rcpp;

// [[Rcpp::export]]
NumericMatrix sp_show_storage(arma::sp_mat x) {
  
  NumericMatrix ans(x.n_nonzero, 3u);
  int i = 0;
  for(arma::sp_mat::const_iterator it = x.begin(); it != x.end(); ++it) {
    
    ans(i, 0) = it.row(); // Row position
    ans(i, 1) = it.col(); // Col position
    ans(i++, 2) = *it;    // Value
    
  }
  
  // Adding colnames
  colnames(ans) = CharacterVector::create(&amp;quot;row&amp;quot;, &amp;quot;col&amp;quot;, &amp;quot;val&amp;quot;);
    
  return ans;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here is a fake (not at all) sparse matrix of size 3x3 in which each of the non-zero elements &lt;code&gt;(i,j)&lt;/code&gt; are in the form of &lt;code&gt;ij&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(Matrix)
M &amp;lt;- matrix(0,nrow=3, ncol=3)
M[1,2] &amp;lt;- 12
M[2,1] &amp;lt;- 21
M[2,3] &amp;lt;- 23
M[3,2] &amp;lt;- 32
(M &amp;lt;- methods::as(M, &amp;quot;dgCMatrix&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 3 x 3 sparse Matrix of class &amp;quot;dgCMatrix&amp;quot;
##              
## [1,]  . 12  .
## [2,] 21  . 23
## [3,]  . 32  .&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And here is what &lt;code&gt;sp_show_storage&lt;/code&gt; returns from this sparse matrix.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;sp_show_storage(M)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##      row col val
## [1,]   1   0  21
## [2,]   0   1  12
## [3,]   2   1  32
## [4,]   1   2  23&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;what-about-iterating-through-rows-instead-of-columns&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;What about iterating through rows instead of columns?&lt;/h2&gt;
&lt;p&gt;The following lines of code create three functions, &lt;code&gt;sp_iterate&lt;/code&gt;, &lt;code&gt;sp_row_iterate&lt;/code&gt;, and &lt;code&gt;sp_t_iterate&lt;/code&gt;, this is, a column-major iterator, a row-major iterator, and a pseudo row-major iterator (I first transpose the matrix, and then iterate using the column-major iterator), respectively.&lt;/p&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;RcppArmadillo.h&amp;gt;
// [[Rcpp::depends(RcppArmadillo)]]

using namespace Rcpp;

// Column-major method iterator (default)
// [[Rcpp::export]]
arma::vec sp_iterate(arma::sp_mat x) {
  
  arma::vec ans(x.n_nonzero);
  
  typedef arma::sp_mat::const_iterator iter;
  int k = 0;
  for (iter i = x.begin(); i != x.end(); i++)
    ans.at(k++) = *i;
  
  return ans;
}

// Sort-of row-major method iterator. For this to work, we first need to tell
// armadillo which row we would like to look at... this doesn&amp;#39;t look nice.
// [[Rcpp::export]]
arma::vec sp_row_iterate(arma::sp_mat x) {
  
  arma::vec ans(x.n_nonzero);
  
  typedef arma::sp_mat::const_row_iterator iter;
  int k = 0;
  for (unsigned int i = 0; i &amp;lt; x.n_rows; i++)
    for (iter j = x.begin_row(i); j != x.end_row(i); ++j)
      ans.at(k++) = *j;
  
  return ans;
}

// Another sort-of row-major method iterator. Now, instead of using
// `const_row_iterator`, we use `const_iterator` but transpose the matrix first
// [[Rcpp::export]]
arma::vec sp_t_iterate(arma::sp_mat x) {
  
  arma::vec ans(x.n_nonzero);
  arma::sp_mat z = x.t();
  
  int k = 0;
  typedef arma::sp_mat::const_iterator iter;
  for (iter i = z.begin(); i != z.end(); ++i)
    ans.at(k++) = *i;
  
  return ans;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And here is what we get from calling each of the functions:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;data.frame(
  col_major  = sp_iterate(M),
  row_major  = sp_row_iterate(M),
  row_major2 = sp_t_iterate(M)
)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   col_major row_major row_major2
## 1        21        12         12
## 2        12        21         21
## 3        32        23         23
## 4        23        32         32&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now what about speed?&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;set.seed(1)
n &amp;lt;- 200
M &amp;lt;- methods::as(
  matrix(runif(n^2) &amp;lt; .001, nrow = n),
  &amp;quot;dgCMatrix&amp;quot;
)

microbenchmark::microbenchmark(
   sp_row_iterate(M),
   sp_t_iterate(M),
   times = 100, unit=&amp;quot;relative&amp;quot;
)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Unit: relative
##               expr      min       lq     mean   median       uq      max
##  sp_row_iterate(M) 29.80559 26.02395 13.39483 24.80326 23.29237 1.835886
##    sp_t_iterate(M)  1.00000  1.00000  1.00000  1.00000  1.00000 1.000000
##  neval
##    100
##    100&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It turns out that &lt;code&gt;const_row_iterator&lt;/code&gt; implementation is significantly slower because of how the data is stored. The &lt;code&gt;SpMat&lt;/code&gt; object from &lt;code&gt;armadillo&lt;/code&gt; uses the &lt;a href=&#34;https://en.wikipedia.org/wiki/Row-_and_column-major_order&#34;&gt;Column-Major Order&lt;/a&gt; method for storing the sparse matrix, which means that, whenever we want to iterate through columns this is as easy as just reading the values as they are stored. On the other hand, iterating through row-major order implies doing a somewhat exhaustive search of non-empty cells at each row, which eventually becomes computationally very inefficient.&lt;/p&gt;
&lt;p&gt;For those of you who like looking at source code, you can take a look at the way the &lt;code&gt;const_row_iterator&lt;/code&gt; are implemented &lt;a href=&#34;https://fossies.org/dox/armadillo-8.300.3/SpMat__iterators__meat_8hpp_source.html&#34;&gt;here&lt;/a&gt; starting line 392. Here is an extract from the code:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This is irritating because we don’t know where the elements are in each row. What we will do is loop across all columns looking for elements in row 0 (and add to our sum), then in row 1, and so forth, until we get to the desired position.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I can’t agree more with that!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;footnotes&#34;&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id=&#34;fn1&#34;&gt;&lt;p&gt;It is important to notice that a lot of times using sparse matrices is not as useful as it sounds. Before embracing sparseness, think about whether your data needs it. Sparse networks can, sometimes, take you to the wrong place as when your matrix is &lt;em&gt;too dense&lt;/em&gt;, neither your memory nor your computing time will get benefits from using sparse matrices.&lt;a href=&#34;#fnref1&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Visualizing Phylogenetic Trees with R and jsPhyloSVG</title>
      <link>/post/visualizing-phylogenetic-trees-with-r-and-jsphylosvg/</link>
      <pubDate>Fri, 08 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/visualizing-phylogenetic-trees-with-r-and-jsphylosvg/</guid>
      <description>&lt;script src=&#34;/rmarkdown-libs/htmlwidgets/htmlwidgets.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;/rmarkdown-libs/jsphylosvg/jsphylosvg-min.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;/rmarkdown-libs/jsphylosvg/raphael-min.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;/rmarkdown-libs/jsphylosvg/yui-min.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;/rmarkdown-libs/jsPhyloSVG-binding/jsPhyloSVG.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;During the last year I’ve been working on a daily basis with &lt;a href=&#34;../publication/aphylo/&#34;&gt;phylogenetic trees&lt;/a&gt;, objects that in graph jargon are called Directed Acyclic Graphs. While R does have some cool packages out there to visualize these–including &lt;a href=&#34;https://zachcp.github.io/phylocanvas/&#34;&gt;phylocanvas&lt;/a&gt; which looks great!–I wanted to tryout &lt;a href=&#34;http://www.jsphylosvg.com&#34;&gt;jsPhyloSVG&lt;/a&gt;, and moreover, to learn how to use &lt;a href=&#34;http://www.htmlwidgets.org&#34;&gt;htmlwidgets&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;So, after a week-long process of playing with JavaScript, of which I had no prior knowledge (so thank you &lt;a href=&#34;https://w3schools.com&#34;&gt;W3shools&lt;/a&gt;)!, and hours of head-scratching, I created this R package, &lt;a href=&#34;https://USCBiostats.github.io/jsPhyloSVG&#34;&gt;jsPhyloSVG&lt;/a&gt; that provides an htmlwidget for the library of the same name. An example follows&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# I&amp;#39;ll be using the ape package to simulate a tree
library(ape)
# You can get it from github USCBiostats/jsPhyloSVG
library(jsPhyloSVG)

# A random phylogenetic tree with 50 tips
tree &amp;lt;- rtree(50)

jsPhyloSVG(write.tree(tree))&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;htmlwidget-1&#34; style=&#34;width:576px;height:480px;&#34; class=&#34;jsPhyloSVG html-widget&#34;&gt;&lt;/div&gt;
&lt;script type=&#34;application/json&#34; data-for=&#34;htmlwidget-1&#34;&gt;{&#34;x&#34;:{&#34;tree&#34;:&#34;((((t42:0.06164457602,t12:0.8180190395):0.9365026811,((((t46:0.8872811985,t18:0.2442051622):0.05846408405,(t45:0.103828141,t31:0.3593903473):0.7426412788):0.5980824926,t17:0.3825574517):0.6083812208,(t48:0.07718362426,(((t23:0.167053587,t37:0.1261179752):0.7458510986,t6:0.9474354652):0.4349117738,(t50:0.7063381786,t8:0.4962021697):0.9406450125):0.1210038015):0.7206946658):0.2086854116):0.2198985894,((t21:0.2193838274,((t13:0.5840207564,t33:0.2736268432):0.3320097523,t47:0.1042833098):0.3601851477):0.4512686338,t25:0.4689089167):0.9308448818):0.04086005269,(((((t40:0.1956768476,t26:0.7943518062):0.1782792471,((t22:0.376651922,t49:0.02243229607):0.3668012598,(((t34:0.664548245,t3:0.1619326761):0.987456419,t11:0.8452820375):0.4688073481,(t16:0.1818585785,t29:0.232394211):0.4287885327):0.7964651871):0.5320081892):0.5300812169,((((t19:0.7511951746,t2:0.204252976):0.4938647044,t7:0.3556977008):0.3586013827,(t38:0.8039303906,(t32:0.9500118557,t43:0.6342438555):0.1515436959):0.7556200498):0.06952625257,(t39:0.9166283135,(t5:0.389964974,t14:0.06258801115):0.1248964793):0.2041574172):0.5678209993):0.3246593522,t30:0.7534215476):0.03259838023,((t36:0.9918274684,((t28:0.5589617616,t15:0.8905687227):0.1676856377,t10:0.7602554555):0.8512989033):0.8380841515,(((t41:0.2416828792,(t9:0.7206978209,t24:0.2196376026):0.6739168777):0.155479881,t20:0.8713164511):0.52036779,(t1:0.6211066761,(t35:0.7013573709,((t44:0.8949779936,t27:0.373667527):0.6651984421,t4:0.3912915958):0.9155155858):0.3391307804):0.4781178217):0.498043109):0.8864928086):0.3566122628);&#34;,&#34;layout&#34;:&#34;circular&#34;},&#34;evals&#34;:[],&#34;jsHooks&#34;:[]}&lt;/script&gt;
&lt;p&gt;You can take a look at the project repo &lt;a href=&#34;https://github.com/USCBiostats/jsPhyloSVG&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Read viz attributes from GEXF files</title>
      <link>/post/read-viz-attributes-from-gexf-files/</link>
      <pubDate>Mon, 27 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/read-viz-attributes-from-gexf-files/</guid>
      <description>&lt;p&gt;So one of the new features that I’ve working on is processing viz attributes. In the &lt;a href=&#34;https://cran.r-project.org/package=rgexf&#34;&gt;CRAN version of rgexf&lt;/a&gt;, the function &lt;code&gt;read.gexf&lt;/code&gt; only reads in non-visual attributes and the graph structure itself, which is no longer true &lt;a href=&#34;https://github.com/gvegayon/rgexf/commit/39d24409c7c641a1e62bdf518ff8ca46ea6172b5&#34;&gt;as of today&lt;/a&gt; (at least for the static viz attributes, all the other dynamic features supported by GEXF will come in the future).&lt;/p&gt;
&lt;p&gt;We start by loading the R packages and reading the “lesmiserables.gexf” file that is included in &lt;code&gt;rgexf&lt;/code&gt;. We use the &lt;code&gt;gexf.to.igraph&lt;/code&gt; function to coerce the &lt;code&gt;gexf&lt;/code&gt; object to an object of class &lt;code&gt;igraph&lt;/code&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Loading R packages
library(rgexf)
library(igraph)

# Reading and coercing into an igraph object
fn      &amp;lt;- system.file(&amp;quot;gexf-graphs&amp;quot;, &amp;quot;lesmiserables.gexf&amp;quot;, package=&amp;quot;rgexf&amp;quot;)
gexf1   &amp;lt;- read.gexf(fn)
igraph1 &amp;lt;- gexf.to.igraph(gexf1)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here comes the nice new feature. &lt;code&gt;read.gexf&lt;/code&gt; and &lt;code&gt;gexf.to.igraph&lt;/code&gt; take into account the visual attributes of the network, and we can use those with &lt;code&gt;plot.igraph&lt;/code&gt; directly without us specifying them! The only changes that I do in the next code chunk are rescaling the vertex and labels sizes (igraph automatically changes scales, which messes a bit with what we read from the GEXF object), and setting the edges to be curved and labels to be black using the &lt;code&gt;sans&lt;/code&gt; font family, and this is what we get&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# We set the mai = c(0,0,0,0) so we have more space for our plot
oldpar &amp;lt;- par(no.readonly = TRUE)
par(mai = rep(0,4))
plot(igraph1,
     vertex.size        = V(igraph1)$size/2,
     vertex.label.cex   = V(igraph1)$size/50,
     vertex.label.color = &amp;quot;black&amp;quot;,
     edge.curved        = TRUE,
     vertex.label.family = &amp;quot;sans&amp;quot;
     )&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2017-11-27-read-viz-attributes-from-gexf-files_files/figure-html/igraph-plot-1.svg&#34; width=&#34;576&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;par(oldpar)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And to make sure we are getting the same output, we can take a look at how the &lt;code&gt;plot.gexf&lt;/code&gt; function draws our GEXF graph.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;plot(
  gexf1,
  copy.only = TRUE,
  dir       = &amp;quot;../../static/post/read-viz-attributes-from-gexf-files/viz&amp;quot;
  )&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## GEXF graph successfully written at:
## /home/george/Documents/website/static/post/read-viz-attributes-from-gexf-files/viz/network.gexf&lt;/code&gt;&lt;/pre&gt;
&lt;iframe width=&#34;100%&#34; height=&#34;400&#34; src=&#34;viz/index.html&#34;&gt;
&lt;/iframe&gt;
&lt;p&gt;As expected, the same result.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Some notes on my first shiny app</title>
      <link>/post/some-notes-on-my-first-shiny-app/</link>
      <pubDate>Thu, 16 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/some-notes-on-my-first-shiny-app/</guid>
      <description>&lt;p&gt;Since there are plenty of examples out there telling you how to get started with shiny (like &lt;a href=&#34;https://shiny.rstudio.com/tutorial/&#34; target=&#34;_blank&#34;&gt;Rstudio&amp;rsquo;s&lt;/a&gt;, or &lt;a href=&#34;https://www.google.com/search?newwindow=1&amp;amp;ei=Og8OWpG4CYOUjwO9tZzABw&amp;amp;q=shiny+tutorial&amp;amp;oq=shiny+tutorial&amp;amp;gs_l=psy-ab.3..0i71k1l4.0.0.0.38217.0.0.0.0.0.0.0.0..0.0....0...1..64.psy-ab..0.0.0....0.v793tYPbUcw&#34; target=&#34;_blank&#34;&gt;Google&lt;/a&gt;), I will focus on telling some of the stuff that I did learned and may not be obvious at first, including some of the mistakes I made.&lt;/p&gt;

&lt;p&gt;Before start, I just want to stress that I&amp;rsquo;m writing this after my first shiny app, you&amp;rsquo;ve been warned! Here it goes:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Use the &amp;ldquo;two-file&amp;rdquo; method&lt;/strong&gt; Instead of putting everything, UI and Server, in a single &lt;code&gt;app.R&lt;/code&gt; file, create two separate files &lt;code&gt;server.R&lt;/code&gt; and &lt;code&gt;ui.R&lt;/code&gt; (see &lt;a href=&#34;http://shiny.rstudio.com/articles/two-file.html&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;). This is not hard to figure out, but is not the first thing that you see when you create a shiny app from Rstudio. The reason why is very simple, as your project grows, you want to have it organized using several Rscripts rather than a single big R file that&amp;rsquo;s called &lt;code&gt;app.R&lt;/code&gt;. That&amp;rsquo;s OK but not very friendly to maintain. This takes us to the next point.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Use separate R files for more complex functions&lt;/strong&gt; If you have other functions that you would like to run with your app, either use the &lt;code&gt;global.R&lt;/code&gt; script, which will be run automatically, or just source your file like &lt;code&gt;source(&amp;quot;extra-functions.R&amp;quot;)&lt;/code&gt; (see &lt;a href=&#34;https://shiny.rstudio.com/articles/modules.html&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;). Again, this makes code maintenance easier.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Make sure all the packages that you need are installed&lt;/strong&gt; You can either keep the source version of such packages as a sub directory, or follow a more simple approach such as using &lt;code&gt;require&lt;/code&gt;, e.g.:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;if (!require(somepackage)) {
  install.packages(&amp;quot;somepackage&amp;quot;)
  library(somepackage)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is especially important when deploying shiny in a in-house server as the &amp;ldquo;shiny user&amp;rdquo; has to have access to those R packages. You can always try to install them globally too so that all users in the server have access to the required packages.&lt;/p&gt;

&lt;p&gt;More important, &lt;font color=&#34;red&#34;&gt;&lt;b&gt;make sure that you have &lt;code&gt;shiny&lt;/code&gt; and &lt;code&gt;rmarkdown&lt;/code&gt; installed and available system-wide!&lt;/b&gt;&lt;/font&gt; I spent roughly half an hour figuring out why my shiny apps didn&amp;rsquo;t started once I started the server in our machine.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Nested apps&lt;/strong&gt; If you want to include several apps under the same folder in your &lt;code&gt;/srv/shiny-server&lt;/code&gt; folder (which is where the shiny apps live), e.g. &lt;code&gt;my-apps&lt;/code&gt;, avoid including &lt;code&gt;R&lt;/code&gt; or &lt;code&gt;Rmd&lt;/code&gt; files in that folder, shiny will try to run those as shiny apps and, for some reason that I&amp;rsquo;m not aware of, links that go from html pages in that folder to your sub directory apps will not work.&lt;/p&gt;

&lt;p&gt;For example, suppose that we have two apps, &lt;code&gt;shinyApp1&lt;/code&gt; and &lt;code&gt;shinyApp2&lt;/code&gt; and we want to keep those in the same folder &lt;code&gt;your-site&lt;/code&gt;, and you have a nice front-end website allowing you to access to such apps with relative links in the form of &lt;code&gt;&amp;lt;a href=&amp;quot;shinyApp1&amp;quot;&amp;gt;Go to shinyApp1&amp;lt;/a&amp;gt;&lt;/code&gt;, you&amp;rsquo;ll just need to &lt;strong&gt;include the &lt;code&gt;index.html&lt;/code&gt;&lt;/strong&gt; of your website (which you can create with &lt;code&gt;rmarkdown&lt;/code&gt;). The &lt;strong&gt;following would be wrong&lt;/strong&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;+---/srv/shiny-server
|   +---/you-site
|       +---index.html
|       +---index.Rmd    # THIS SHOULDN&#39;T BE HERE!
|       +---shinyApp1
|           +---server.R
|           +---ui.R
|       +---shinyApp2
|           +---server.R
|           +---ui.R
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This would result in having a broken link in your &lt;code&gt;index.html&lt;/code&gt; file. You should do this instead, remove the Rmd file from the &lt;code&gt;your-site&lt;/code&gt; folder:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;+---/srv/shiny-server
|   +---/you-site
|       +---index.html
|       +---shinyApp1
|           +---server.R
|           +---ui.R
|       +---shinyApp2
|           +---server.R
|           +---ui.R
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This example was adapted from &lt;a href=&#34;http://docs.rstudio.com/shiny-server/#host-a-directory-of-applications&#34; target=&#34;_blank&#34;&gt;Section 2.7.1&lt;/a&gt; from the Shiny&amp;rsquo;s Admin guide.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Read about Reactivity&lt;/strong&gt; This is a fundamental thing to understand in Shiny, moreover, the key function to review is &lt;code&gt;reactive&lt;/code&gt;, which allows you to create intermediate points (reactive conductors) between your input and output data in the shiny app. Just to give you an idea, here is an (adapted) example that I find useful from the &lt;a href=&#34;http://shiny.rstudio.com/articles/#reactivity&#34; target=&#34;_blank&#34;&gt;shiny documentation&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;This will work&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# A function that will be called from within the server
fib &amp;lt;- function(n) ifelse(n&amp;lt;3, 1, fib(n-1)+fib(n-2))
    
server &amp;lt;- function(input, output) {
      
  # Calling your fancy fib function, notice the
  #
  #     reactive({ ... })
  #
  # wrapper.
  currentFib         &amp;lt;- reactive({ fib(as.numeric(input$n)) })
    
  # You use it as a function later on.
  output$nthValue    &amp;lt;- renderText({ currentFib() })
  output$nthValueInv &amp;lt;- renderText({ 1 / currentFib() })
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This won&amp;rsquo;t work, since currentFib is not in the &amp;ldquo;reactive&amp;rdquo; world!&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;server &amp;lt;- function(input, output) {
  # Will give error
  currentFib      &amp;lt;- fib(as.numeric(input$n))
  output$nthValue &amp;lt;- renderText({ currentFib })
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;For my next steps, I expect to be able to include a shiny app in the R packages &lt;code&gt;aphylo&lt;/code&gt; (which is not on CRAN yet, but available &lt;a href=&#34;https://github.com/USCBiostats/aphylo&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;) and &lt;code&gt;rgexf&lt;/code&gt; (which it is on &lt;a href=&#34;https://cran.r-project.org/package=rgexf&#34; target=&#34;_blank&#34;&gt;CRAN&lt;/a&gt;, but is currently on a major update &lt;a href=&#34;https://github.com/gvegayon/rgexf&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;I recommend taking a look at &lt;a href=&#34;https://bookdown.org/yihui/bookdown/web-pages-and-shiny-apps.html&#34; target=&#34;_blank&#34;&gt;this section&lt;/a&gt; from the &lt;a href=&#34;https://bookdown.org/yihui/bookdown&#34; target=&#34;_blank&#34;&gt;bookdown&lt;/a&gt; that talks about how to include shiny apps within web pages.&lt;/p&gt;

&lt;p&gt;Finally, if you are interested, you can take a look at the shiny app &lt;a href=&#34;https://gvegayon.shinyapps.io/predq/&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt; and at the code &lt;a href=&#34;https://github.com/gvegayon/predq&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Profiling Rcpp</title>
      <link>/post/profiling-rcpp/</link>
      <pubDate>Tue, 14 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/profiling-rcpp/</guid>
      <description>&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;p&gt;Install libuwind&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ wget http://download.savannah.nongnu.org/releases/libunwind/libunwind-1.2.tar.gz &amp;amp;&amp;amp; \
    tar -xf libunwind-1.2.tar.gz &amp;amp;&amp;amp; cd libunwind-1.2; \
    ./configure; sudo make; sudo make install&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Install &lt;a href=&#34;https://github.com/gperftools/gperftools&#34;&gt;google-perftools&lt;/a&gt;&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ git clone https://github.com/gperftools/gperftools
$ &lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>Model Decision Tree</title>
      <link>/post/model-decision-tree/</link>
      <pubDate>Mon, 13 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/model-decision-tree/</guid>
      <description>&lt;script src=&#34;/rmarkdown-libs/htmlwidgets/htmlwidgets.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;/rmarkdown-libs/viz/viz.js&#34;&gt;&lt;/script&gt;
&lt;link href=&#34;/rmarkdown-libs/DiagrammeR-styles/styles.css&#34; rel=&#34;stylesheet&#34; /&gt;
&lt;script src=&#34;/rmarkdown-libs/grViz-binding/grViz.js&#34;&gt;&lt;/script&gt;


&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;if (!require(DiagrammeR)) {
  install.packages(&amp;quot;DiagrammeR&amp;quot;, repos = &amp;quot;https://cloud.r-project.org&amp;quot;)
  library(DiagrammeR)
}&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Loading required package: DiagrammeR&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;grViz(&amp;quot;
digraph boxes_and_circles {
  # Defining models
  node [shape = box]
  
  # Common world
  ols [label=&amp;#39;Linear Regression&amp;#39;]
  probit [label=Probit]
  logit [label=Logit]
  tobit [label=Tobit]

  # Networks
  ERGM
  Siena
  tERGM

  # Decisions
  node [shape=diamond]
  isiid [label=&amp;#39;Is iid&amp;#39;]
  iscts [label=&amp;#39;Is continuous&amp;#39;]

  node [shape=plaintext]
  iid [label=&amp;#39;Independent data&amp;#39;]
  noiid [label=&amp;#39;Not independent data&amp;#39;]
  ctsdat [label=&amp;#39;Continuous&amp;#39;]
  disdat [label=&amp;#39;Discrete&amp;#39;]
  mixdat [label=&amp;#39;Mixture&amp;#39;]
  

  # Edges
  isiid -&amp;gt; iid [dir=none,label=Yes]
  iid -&amp;gt; iscts [dir=none]
  
  iscts -&amp;gt; ctsdat [label=Yes] 
  ctsdat -&amp;gt; ols
  
  iscts -&amp;gt; disdat [label=No]
  disdat -&amp;gt; {probit logit}

  iscts -&amp;gt; mixdat [label=Both]
  mixdat -&amp;gt; tobit
  

  isiid -&amp;gt; noiid [dir=none, label=No]
  noiid -&amp;gt; ERGM
  
}

  
      &amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;htmlwidget-1&#34; style=&#34;width:576px;height:480px;&#34; class=&#34;grViz html-widget&#34;&gt;&lt;/div&gt;
&lt;script type=&#34;application/json&#34; data-for=&#34;htmlwidget-1&#34;&gt;{&#34;x&#34;:{&#34;diagram&#34;:&#34;\ndigraph boxes_and_circles {\n  # Defining models\n  node [shape = box]\n  \n  # Common world\n  ols [label=\&#34;Linear Regression\&#34;]\n  probit [label=Probit]\n  logit [label=Logit]\n  tobit [label=Tobit]\n\n  # Networks\n  ERGM\n  Siena\n  tERGM\n\n  # Decisions\n  node [shape=diamond]\n  isiid [label=\&#34;Is iid\&#34;]\n  iscts [label=\&#34;Is continuous\&#34;]\n\n  node [shape=plaintext]\n  iid [label=\&#34;Independent data\&#34;]\n  noiid [label=\&#34;Not independent data\&#34;]\n  ctsdat [label=\&#34;Continuous\&#34;]\n  disdat [label=\&#34;Discrete\&#34;]\n  mixdat [label=\&#34;Mixture\&#34;]\n  \n\n  # Edges\n  isiid -&gt; iid [dir=none,label=Yes]\n  iid -&gt; iscts [dir=none]\n  \n  iscts -&gt; ctsdat [label=Yes] \n  ctsdat -&gt; ols\n  \n  iscts -&gt; disdat [label=No]\n  disdat -&gt; {probit logit}\n\n  iscts -&gt; mixdat [label=Both]\n  mixdat -&gt; tobit\n  \n\n  isiid -&gt; noiid [dir=none, label=No]\n  noiid -&gt; ERGM\n  \n}\n\n  \n      &#34;,&#34;config&#34;:{&#34;engine&#34;:&#34;dot&#34;,&#34;options&#34;:null}},&#34;evals&#34;:[],&#34;jsHooks&#34;:[]}&lt;/script&gt;
</description>
    </item>
    
  </channel>
</rss>
