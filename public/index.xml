<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>GGVY on GGVY</title>
    <link>/</link>
    <description>Recent content in GGVY on GGVY</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2016 George G. Vega Yon</copyright>
    <lastBuildDate>Wed, 20 Apr 2016 00:00:00 +0000</lastBuildDate>
    <atom:link href="/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Workshop: Introduction to R (for HPC users)</title>
      <link>/talk/intro-2-r-4-hpc-users-2018/</link>
      <pubDate>Tue, 07 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>/talk/intro-2-r-4-hpc-users-2018/</guid>
      <description>&lt;p&gt;The presentation source code can be found &lt;a href=&#34;https://github.com/gvegayon/software-dev/tree/master/happy_scientist/parallel_computing&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The &#39;Happy Scientist&#39; Workshop #1: An introduction to high-performance computing using R</title>
      <link>/talk/hpc-in-r-2018/</link>
      <pubDate>Thu, 29 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>/talk/hpc-in-r-2018/</guid>
      <description>&lt;p&gt;This talk was jointly with Garrett Weaver. The presentation source code can be found &lt;a href=&#34;https://github.com/gvegayon/software-dev/tree/master/happy_scientist/parallel_computing&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Working with sparse matrices in C&#43;&#43;</title>
      <link>/post/working-with-sparse-matrices-in-cpp/</link>
      <pubDate>Tue, 16 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/working-with-sparse-matrices-in-cpp/</guid>
      <description>&lt;p&gt;Working with sparse matrices is a big part of my day. Social networks are inherently sparse, so sparse matrices are the best buds you can get when representing large networks as adjacency matrices.&lt;a href=&#34;#fn1&#34; class=&#34;footnoteRef&#34; id=&#34;fnref1&#34;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; As so, I usually find myself trying to take advantage of their structure as, contrasting dense matrices, we don’t need to write nested &lt;code&gt;for(i...) for (j...)&lt;/code&gt; loops to work with them, instead, sometimes all what we want is just to extract/work with its non-zero elements.&lt;/p&gt;
&lt;p&gt;About a year ago, while working on &lt;a href=&#34;https://github.com/USCCANA/netdiffuseR&#34;&gt;netdiffuseR&lt;/a&gt;, I was struggling a bit to write down an efficient way of iterating through non-zero elements. Right after writing my own function to return the position of non-zero elements, I wrote &lt;a href=&#34;http://conradsanderson.id.au/&#34;&gt;Dr Conrad Sanderson&lt;/a&gt;–one of the masterminds behind armadillo–and learned that a nice solution for this was already included in armadillo, &lt;a href=&#34;http://arma.sourceforge.net/docs.html#iterators_mat&#34;&gt;matrix iterators&lt;/a&gt;.&lt;/p&gt;
&lt;div id=&#34;a-simple-example&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;A simple example&lt;/h2&gt;
&lt;p&gt;First off, to work with iterators for sparse matrices we will look at the simplest example: extracting positions and values from the matrix.&lt;/p&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;RcppArmadillo.h&amp;gt;
// [[Rcpp::depends(RcppArmadillo)]]

using namespace Rcpp;

// [[Rcpp::export]]
NumericMatrix sp_show_storage(arma::sp_mat x) {
  
  NumericMatrix ans(x.n_nonzero, 3u);
  int i = 0;
  for(arma::sp_mat::const_iterator it = x.begin(); it != x.end(); ++it) {
    
    ans(i, 0) = it.row(); // Row position
    ans(i, 1) = it.col(); // Col position
    ans(i++, 2) = *it;    // Value
    
  }
  
  // Adding colnames
  colnames(ans) = CharacterVector::create(&amp;quot;row&amp;quot;, &amp;quot;col&amp;quot;, &amp;quot;val&amp;quot;);
    
  return ans;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here is a fake (not at all) sparse matrix of size 3x3 in which each of the non-zero elements &lt;code&gt;(i,j)&lt;/code&gt; are in the form of &lt;code&gt;ij&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(Matrix)
M &amp;lt;- matrix(0,nrow=3, ncol=3)
M[1,2] &amp;lt;- 12
M[2,1] &amp;lt;- 21
M[2,3] &amp;lt;- 23
M[3,2] &amp;lt;- 32
(M &amp;lt;- methods::as(M, &amp;quot;dgCMatrix&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 3 x 3 sparse Matrix of class &amp;quot;dgCMatrix&amp;quot;
##              
## [1,]  . 12  .
## [2,] 21  . 23
## [3,]  . 32  .&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And here is what &lt;code&gt;sp_show_storage&lt;/code&gt; returns from this sparse matrix.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;sp_show_storage(M)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##      row col val
## [1,]   1   0  21
## [2,]   0   1  12
## [3,]   2   1  32
## [4,]   1   2  23&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;what-about-iterating-through-rows-instead-of-columns&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;What about iterating through rows instead of columns?&lt;/h2&gt;
&lt;p&gt;The following lines of code create three functions, &lt;code&gt;sp_iterate&lt;/code&gt;, &lt;code&gt;sp_row_iterate&lt;/code&gt;, and &lt;code&gt;sp_t_iterate&lt;/code&gt;, this is, a column-major iterator, a row-major iterator, and a pseudo row-major iterator (I first transpose the matrix, and then iterate using the column-major iterator), respectively.&lt;/p&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;RcppArmadillo.h&amp;gt;
// [[Rcpp::depends(RcppArmadillo)]]

using namespace Rcpp;

// Column-major method iterator (default)
// [[Rcpp::export]]
arma::vec sp_iterate(arma::sp_mat x) {
  
  arma::vec ans(x.n_nonzero);
  
  typedef arma::sp_mat::const_iterator iter;
  int k = 0;
  for (iter i = x.begin(); i != x.end(); i++)
    ans.at(k++) = *i;
  
  return ans;
}

// Sort-of row-major method iterator. For this to work, we first need to tell
// armadillo which row we would like to look at... this doesn&amp;#39;t look nice.
// [[Rcpp::export]]
arma::vec sp_row_iterate(arma::sp_mat x) {
  
  arma::vec ans(x.n_nonzero);
  
  typedef arma::sp_mat::const_row_iterator iter;
  int k = 0;
  for (unsigned int i = 0; i &amp;lt; x.n_rows; i++)
    for (iter j = x.begin_row(i); j != x.end_row(i); ++j)
      ans.at(k++) = *j;
  
  return ans;
}

// Another sort-of row-major method iterator. Now, instead of using
// `const_row_iterator`, we use `const_iterator` but transpose the matrix first
// [[Rcpp::export]]
arma::vec sp_t_iterate(arma::sp_mat x) {
  
  arma::vec ans(x.n_nonzero);
  arma::sp_mat z = x.t();
  
  int k = 0;
  typedef arma::sp_mat::const_iterator iter;
  for (iter i = z.begin(); i != z.end(); ++i)
    ans.at(k++) = *i;
  
  return ans;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And here is what we get from calling each of the functions:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;data.frame(
  col_major  = sp_iterate(M),
  row_major  = sp_row_iterate(M),
  row_major2 = sp_t_iterate(M)
)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   col_major row_major row_major2
## 1        21        12         12
## 2        12        21         21
## 3        32        23         23
## 4        23        32         32&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now what about speed?&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;set.seed(1)
n &amp;lt;- 200
M &amp;lt;- methods::as(
  matrix(runif(n^2) &amp;lt; .001, nrow = n),
  &amp;quot;dgCMatrix&amp;quot;
)

microbenchmark::microbenchmark(
   sp_row_iterate(M),
   sp_t_iterate(M),
   times = 100, unit=&amp;quot;relative&amp;quot;
)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Unit: relative
##               expr      min       lq     mean   median       uq      max
##  sp_row_iterate(M) 29.80559 26.02395 13.39483 24.80326 23.29237 1.835886
##    sp_t_iterate(M)  1.00000  1.00000  1.00000  1.00000  1.00000 1.000000
##  neval
##    100
##    100&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It turns out that &lt;code&gt;const_row_iterator&lt;/code&gt; implementation is significantly slower because of how the data is stored. The &lt;code&gt;SpMat&lt;/code&gt; object from &lt;code&gt;armadillo&lt;/code&gt; uses the &lt;a href=&#34;https://en.wikipedia.org/wiki/Row-_and_column-major_order&#34;&gt;Column-Major Order&lt;/a&gt; method for storing the sparse matrix, which means that, whenever we want to iterate through columns this is as easy as just reading the values as they are stored. On the other hand, iterating through row-major order implies doing a somewhat exhaustive search of non-empty cells at each row, which eventually becomes computationally very inefficient.&lt;/p&gt;
&lt;p&gt;For those of you who like looking at source code, you can take a look at the way the &lt;code&gt;const_row_iterator&lt;/code&gt; are implemented &lt;a href=&#34;https://fossies.org/dox/armadillo-8.300.3/SpMat__iterators__meat_8hpp_source.html&#34;&gt;here&lt;/a&gt; starting line 392. Here is an extract from the code:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This is irritating because we don’t know where the elements are in each row. What we will do is loop across all columns looking for elements in row 0 (and add to our sum), then in row 1, and so forth, until we get to the desired position.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I can’t agree more with that!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;footnotes&#34;&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id=&#34;fn1&#34;&gt;&lt;p&gt;It is important to notice that a lot of times using sparse matrices is not as useful as it sounds. Before embracing sparseness, think about whether your data needs it. Sparse networks can, sometimes, take you to the wrong place as when your matrix is &lt;em&gt;too dense&lt;/em&gt;, neither your memory nor your computing time will get benefits from using sparse matrices.&lt;a href=&#34;#fnref1&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Visualizing Phylogenetic Trees with R and jsPhyloSVG</title>
      <link>/post/visualizing-phylogenetic-trees-with-r-and-jsphylosvg/</link>
      <pubDate>Fri, 08 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/visualizing-phylogenetic-trees-with-r-and-jsphylosvg/</guid>
      <description>&lt;script src=&#34;/rmarkdown-libs/htmlwidgets/htmlwidgets.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;/rmarkdown-libs/jsphylosvg/jsphylosvg-min.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;/rmarkdown-libs/jsphylosvg/raphael-min.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;/rmarkdown-libs/jsphylosvg/yui-min.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;/rmarkdown-libs/jsPhyloSVG-binding/jsPhyloSVG.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;During the last year I’ve been working on a daily basis with &lt;a href=&#34;../publication/aphylo/&#34;&gt;phylogenetic trees&lt;/a&gt;, objects that in graph jargon are called Directed Acyclic Graphs. While R does have some cool packages out there to visualize these–including &lt;a href=&#34;https://zachcp.github.io/phylocanvas/&#34;&gt;phylocanvas&lt;/a&gt; which looks great!–I wanted to tryout &lt;a href=&#34;http://www.jsphylosvg.com&#34;&gt;jsPhyloSVG&lt;/a&gt;, and moreover, to learn how to use &lt;a href=&#34;http://www.htmlwidgets.org&#34;&gt;htmlwidgets&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;So, after a week-long process of playing with JavaScript, of which I had no prior knowledge (so thank you &lt;a href=&#34;https://w3schools.com&#34;&gt;W3shools&lt;/a&gt;)!, and hours of head-scratching, I created this R package, &lt;a href=&#34;https://USCBiostats.github.io/jsPhyloSVG&#34;&gt;jsPhyloSVG&lt;/a&gt; that provides an htmlwidget for the library of the same name. An example follows&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# I&amp;#39;ll be using the ape package to simulate a tree
library(ape)
# You can get it from github USCBiostats/jsPhyloSVG
library(jsPhyloSVG)

# A random phylogenetic tree with 50 tips
tree &amp;lt;- rtree(50)

jsPhyloSVG(write.tree(tree))&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;htmlwidget-1&#34; style=&#34;width:576px;height:480px;&#34; class=&#34;jsPhyloSVG html-widget&#34;&gt;&lt;/div&gt;
&lt;script type=&#34;application/json&#34; data-for=&#34;htmlwidget-1&#34;&gt;{&#34;x&#34;:{&#34;tree&#34;:&#34;((((t42:0.06164457602,t12:0.8180190395):0.9365026811,((((t46:0.8872811985,t18:0.2442051622):0.05846408405,(t45:0.103828141,t31:0.3593903473):0.7426412788):0.5980824926,t17:0.3825574517):0.6083812208,(t48:0.07718362426,(((t23:0.167053587,t37:0.1261179752):0.7458510986,t6:0.9474354652):0.4349117738,(t50:0.7063381786,t8:0.4962021697):0.9406450125):0.1210038015):0.7206946658):0.2086854116):0.2198985894,((t21:0.2193838274,((t13:0.5840207564,t33:0.2736268432):0.3320097523,t47:0.1042833098):0.3601851477):0.4512686338,t25:0.4689089167):0.9308448818):0.04086005269,(((((t40:0.1956768476,t26:0.7943518062):0.1782792471,((t22:0.376651922,t49:0.02243229607):0.3668012598,(((t34:0.664548245,t3:0.1619326761):0.987456419,t11:0.8452820375):0.4688073481,(t16:0.1818585785,t29:0.232394211):0.4287885327):0.7964651871):0.5320081892):0.5300812169,((((t19:0.7511951746,t2:0.204252976):0.4938647044,t7:0.3556977008):0.3586013827,(t38:0.8039303906,(t32:0.9500118557,t43:0.6342438555):0.1515436959):0.7556200498):0.06952625257,(t39:0.9166283135,(t5:0.389964974,t14:0.06258801115):0.1248964793):0.2041574172):0.5678209993):0.3246593522,t30:0.7534215476):0.03259838023,((t36:0.9918274684,((t28:0.5589617616,t15:0.8905687227):0.1676856377,t10:0.7602554555):0.8512989033):0.8380841515,(((t41:0.2416828792,(t9:0.7206978209,t24:0.2196376026):0.6739168777):0.155479881,t20:0.8713164511):0.52036779,(t1:0.6211066761,(t35:0.7013573709,((t44:0.8949779936,t27:0.373667527):0.6651984421,t4:0.3912915958):0.9155155858):0.3391307804):0.4781178217):0.498043109):0.8864928086):0.3566122628);&#34;,&#34;layout&#34;:&#34;circular&#34;},&#34;evals&#34;:[],&#34;jsHooks&#34;:[]}&lt;/script&gt;
&lt;p&gt;You can take a look at the project repo &lt;a href=&#34;https://github.com/USCBiostats/jsPhyloSVG&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Read viz attributes from GEXF files</title>
      <link>/post/read-viz-attributes-from-gexf-files/</link>
      <pubDate>Mon, 27 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/read-viz-attributes-from-gexf-files/</guid>
      <description>&lt;p&gt;So one of the new features that I’ve working on is processing viz attributes. In the &lt;a href=&#34;https://cran.r-project.org/package=rgexf&#34;&gt;CRAN version of rgexf&lt;/a&gt;, the function &lt;code&gt;read.gexf&lt;/code&gt; only reads in non-visual attributes and the graph structure itself, which is no longer true &lt;a href=&#34;https://github.com/gvegayon/rgexf/commit/39d24409c7c641a1e62bdf518ff8ca46ea6172b5&#34;&gt;as of today&lt;/a&gt; (at least for the static viz attributes, all the other dynamic features supported by GEXF will come in the future).&lt;/p&gt;
&lt;p&gt;We start by loading the R packages and reading the “lesmiserables.gexf” file that is included in &lt;code&gt;rgexf&lt;/code&gt;. We use the &lt;code&gt;gexf.to.igraph&lt;/code&gt; function to coerce the &lt;code&gt;gexf&lt;/code&gt; object to an object of class &lt;code&gt;igraph&lt;/code&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Loading R packages
library(rgexf)
library(igraph)

# Reading and coercing into an igraph object
fn      &amp;lt;- system.file(&amp;quot;gexf-graphs&amp;quot;, &amp;quot;lesmiserables.gexf&amp;quot;, package=&amp;quot;rgexf&amp;quot;)
gexf1   &amp;lt;- read.gexf(fn)
igraph1 &amp;lt;- gexf.to.igraph(gexf1)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here comes the nice new feature. &lt;code&gt;read.gexf&lt;/code&gt; and &lt;code&gt;gexf.to.igraph&lt;/code&gt; take into account the visual attributes of the network, and we can use those with &lt;code&gt;plot.igraph&lt;/code&gt; directly without us specifying them! The only changes that I do in the next code chunk are rescaling the vertex and labels sizes (igraph automatically changes scales, which messes a bit with what we read from the GEXF object), and setting the edges to be curved and labels to be black using the &lt;code&gt;sans&lt;/code&gt; font family, and this is what we get&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# We set the mai = c(0,0,0,0) so we have more space for our plot
oldpar &amp;lt;- par(no.readonly = TRUE)
par(mai = rep(0,4))
plot(igraph1,
     vertex.size        = V(igraph1)$size/2,
     vertex.label.cex   = V(igraph1)$size/50,
     vertex.label.color = &amp;quot;black&amp;quot;,
     edge.curved        = TRUE,
     vertex.label.family = &amp;quot;sans&amp;quot;
     )&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2017-11-27-read-viz-attributes-from-gexf-files_files/figure-html/igraph-plot-1.svg&#34; width=&#34;576&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;par(oldpar)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And to make sure we are getting the same output, we can take a look at how the &lt;code&gt;plot.gexf&lt;/code&gt; function draws our GEXF graph.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;plot(
  gexf1,
  copy.only = TRUE,
  dir       = &amp;quot;../../static/post/read-viz-attributes-from-gexf-files/viz&amp;quot;
  )&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## GEXF graph successfully written at:
## /home/george/Documents/website/static/post/read-viz-attributes-from-gexf-files/viz/network.gexf&lt;/code&gt;&lt;/pre&gt;
&lt;iframe width=&#34;100%&#34; height=&#34;400&#34; src=&#34;viz/index.html&#34;&gt;
&lt;/iframe&gt;
&lt;p&gt;As expected, the same result.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Some notes on my first shiny app</title>
      <link>/post/some-notes-on-my-first-shiny-app/</link>
      <pubDate>Thu, 16 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/some-notes-on-my-first-shiny-app/</guid>
      <description>&lt;p&gt;Since there are plenty of examples out there telling you how to get started with shiny (like &lt;a href=&#34;https://shiny.rstudio.com/tutorial/&#34; target=&#34;_blank&#34;&gt;Rstudio&amp;rsquo;s&lt;/a&gt;, or &lt;a href=&#34;https://www.google.com/search?newwindow=1&amp;amp;ei=Og8OWpG4CYOUjwO9tZzABw&amp;amp;q=shiny+tutorial&amp;amp;oq=shiny+tutorial&amp;amp;gs_l=psy-ab.3..0i71k1l4.0.0.0.38217.0.0.0.0.0.0.0.0..0.0....0...1..64.psy-ab..0.0.0....0.v793tYPbUcw&#34; target=&#34;_blank&#34;&gt;Google&lt;/a&gt;), I will focus on telling some of the stuff that I did learned and may not be obvious at first, including some of the mistakes I made.&lt;/p&gt;

&lt;p&gt;Before start, I just want to stress that I&amp;rsquo;m writing this after my first shiny app, you&amp;rsquo;ve been warned! Here it goes:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Use the &amp;ldquo;two-file&amp;rdquo; method&lt;/strong&gt; Instead of putting everything, UI and Server, in a single &lt;code&gt;app.R&lt;/code&gt; file, create two separate files &lt;code&gt;server.R&lt;/code&gt; and &lt;code&gt;ui.R&lt;/code&gt; (see &lt;a href=&#34;http://shiny.rstudio.com/articles/two-file.html&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;). This is not hard to figure out, but is not the first thing that you see when you create a shiny app from Rstudio. The reason why is very simple, as your project grows, you want to have it organized using several Rscripts rather than a single big R file that&amp;rsquo;s called &lt;code&gt;app.R&lt;/code&gt;. That&amp;rsquo;s OK but not very friendly to maintain. This takes us to the next point.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Use separate R files for more complex functions&lt;/strong&gt; If you have other functions that you would like to run with your app, either use the &lt;code&gt;global.R&lt;/code&gt; script, which will be run automatically, or just source your file like &lt;code&gt;source(&amp;quot;extra-functions.R&amp;quot;)&lt;/code&gt; (see &lt;a href=&#34;https://shiny.rstudio.com/articles/modules.html&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;). Again, this makes code maintenance easier.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Make sure all the packages that you need are installed&lt;/strong&gt; You can either keep the source version of such packages as a sub directory, or follow a more simple approach such as using &lt;code&gt;require&lt;/code&gt;, e.g.:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;if (!require(somepackage)) {
  install.packages(&amp;quot;somepackage&amp;quot;)
  library(somepackage)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is especially important when deploying shiny in a in-house server as the &amp;ldquo;shiny user&amp;rdquo; has to have access to those R packages. You can always try to install them globally too so that all users in the server have access to the required packages.&lt;/p&gt;

&lt;p&gt;More important, &lt;font color=&#34;red&#34;&gt;&lt;b&gt;make sure that you have &lt;code&gt;shiny&lt;/code&gt; and &lt;code&gt;rmarkdown&lt;/code&gt; installed and available system-wide!&lt;/b&gt;&lt;/font&gt; I spent roughly half an hour figuring out why my shiny apps didn&amp;rsquo;t started once I started the server in our machine.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Nested apps&lt;/strong&gt; If you want to include several apps under the same folder in your &lt;code&gt;/srv/shiny-server&lt;/code&gt; folder (which is where the shiny apps live), e.g. &lt;code&gt;my-apps&lt;/code&gt;, avoid including &lt;code&gt;R&lt;/code&gt; or &lt;code&gt;Rmd&lt;/code&gt; files in that folder, shiny will try to run those as shiny apps and, for some reason that I&amp;rsquo;m not aware of, links that go from html pages in that folder to your sub directory apps will not work.&lt;/p&gt;

&lt;p&gt;For example, suppose that we have two apps, &lt;code&gt;shinyApp1&lt;/code&gt; and &lt;code&gt;shinyApp2&lt;/code&gt; and we want to keep those in the same folder &lt;code&gt;your-site&lt;/code&gt;, and you have a nice front-end website allowing you to access to such apps with relative links in the form of &lt;code&gt;&amp;lt;a href=&amp;quot;shinyApp1&amp;quot;&amp;gt;Go to shinyApp1&amp;lt;/a&amp;gt;&lt;/code&gt;, you&amp;rsquo;ll just need to &lt;strong&gt;include the &lt;code&gt;index.html&lt;/code&gt;&lt;/strong&gt; of your website (which you can create with &lt;code&gt;rmarkdown&lt;/code&gt;). The &lt;strong&gt;following would be wrong&lt;/strong&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;+---/srv/shiny-server
|   +---/you-site
|       +---index.html
|       +---index.Rmd    # THIS SHOULDN&#39;T BE HERE!
|       +---shinyApp1
|           +---server.R
|           +---ui.R
|       +---shinyApp2
|           +---server.R
|           +---ui.R
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This would result in having a broken link in your &lt;code&gt;index.html&lt;/code&gt; file. You should do this instead, remove the Rmd file from the &lt;code&gt;your-site&lt;/code&gt; folder:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;+---/srv/shiny-server
|   +---/you-site
|       +---index.html
|       +---shinyApp1
|           +---server.R
|           +---ui.R
|       +---shinyApp2
|           +---server.R
|           +---ui.R
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This example was adapted from &lt;a href=&#34;http://docs.rstudio.com/shiny-server/#host-a-directory-of-applications&#34; target=&#34;_blank&#34;&gt;Section 2.7.1&lt;/a&gt; from the Shiny&amp;rsquo;s Admin guide.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Read about Reactivity&lt;/strong&gt; This is a fundamental thing to understand in Shiny, moreover, the key function to review is &lt;code&gt;reactive&lt;/code&gt;, which allows you to create intermediate points (reactive conductors) between your input and output data in the shiny app. Just to give you an idea, here is an (adapted) example that I find useful from the &lt;a href=&#34;http://shiny.rstudio.com/articles/#reactivity&#34; target=&#34;_blank&#34;&gt;shiny documentation&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;This will work&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# A function that will be called from within the server
fib &amp;lt;- function(n) ifelse(n&amp;lt;3, 1, fib(n-1)+fib(n-2))
    
server &amp;lt;- function(input, output) {
      
  # Calling your fancy fib function, notice the
  #
  #     reactive({ ... })
  #
  # wrapper.
  currentFib         &amp;lt;- reactive({ fib(as.numeric(input$n)) })
    
  # You use it as a function later on.
  output$nthValue    &amp;lt;- renderText({ currentFib() })
  output$nthValueInv &amp;lt;- renderText({ 1 / currentFib() })
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This won&amp;rsquo;t work, since currentFib is not in the &amp;ldquo;reactive&amp;rdquo; world!&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;server &amp;lt;- function(input, output) {
  # Will give error
  currentFib      &amp;lt;- fib(as.numeric(input$n))
  output$nthValue &amp;lt;- renderText({ currentFib })
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;For my next steps, I expect to be able to include a shiny app in the R packages &lt;code&gt;aphylo&lt;/code&gt; (which is not on CRAN yet, but available &lt;a href=&#34;https://github.com/USCBiostats/aphylo&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;) and &lt;code&gt;rgexf&lt;/code&gt; (which it is on &lt;a href=&#34;https://cran.r-project.org/package=rgexf&#34; target=&#34;_blank&#34;&gt;CRAN&lt;/a&gt;, but is currently on a major update &lt;a href=&#34;https://github.com/gvegayon/rgexf&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;I recommend taking a look at &lt;a href=&#34;https://bookdown.org/yihui/bookdown/web-pages-and-shiny-apps.html&#34; target=&#34;_blank&#34;&gt;this section&lt;/a&gt; from the &lt;a href=&#34;https://bookdown.org/yihui/bookdown&#34; target=&#34;_blank&#34;&gt;bookdown&lt;/a&gt; that talks about how to include shiny apps within web pages.&lt;/p&gt;

&lt;p&gt;Finally, if you are interested, you can take a look at the shiny app &lt;a href=&#34;https://gvegayon.shinyapps.io/predq/&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt; and at the code &lt;a href=&#34;https://github.com/gvegayon/predq&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Profiling Rcpp</title>
      <link>/post/profiling-rcpp/</link>
      <pubDate>Tue, 14 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/profiling-rcpp/</guid>
      <description>&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;p&gt;Install libuwind&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ wget http://download.savannah.nongnu.org/releases/libunwind/libunwind-1.2.tar.gz &amp;amp;&amp;amp; \
    tar -xf libunwind-1.2.tar.gz &amp;amp;&amp;amp; cd libunwind-1.2; \
    ./configure; sudo make; sudo make install&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Install &lt;a href=&#34;https://github.com/gperftools/gperftools&#34;&gt;google-perftools&lt;/a&gt;&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;$ git clone https://github.com/gperftools/gperftools
$ &lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>Model Decision Tree</title>
      <link>/post/model-decision-tree/</link>
      <pubDate>Mon, 13 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/model-decision-tree/</guid>
      <description>&lt;script src=&#34;/rmarkdown-libs/htmlwidgets/htmlwidgets.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;/rmarkdown-libs/viz/viz.js&#34;&gt;&lt;/script&gt;
&lt;link href=&#34;/rmarkdown-libs/DiagrammeR-styles/styles.css&#34; rel=&#34;stylesheet&#34; /&gt;
&lt;script src=&#34;/rmarkdown-libs/grViz-binding/grViz.js&#34;&gt;&lt;/script&gt;


&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;if (!require(DiagrammeR)) {
  install.packages(&amp;quot;DiagrammeR&amp;quot;, repos = &amp;quot;https://cloud.r-project.org&amp;quot;)
  library(DiagrammeR)
}&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Loading required package: DiagrammeR&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;grViz(&amp;quot;
digraph boxes_and_circles {
  # Defining models
  node [shape = box]
  
  # Common world
  ols [label=&amp;#39;Linear Regression&amp;#39;]
  probit [label=Probit]
  logit [label=Logit]
  tobit [label=Tobit]

  # Networks
  ERGM
  Siena
  tERGM

  # Decisions
  node [shape=diamond]
  isiid [label=&amp;#39;Is iid&amp;#39;]
  iscts [label=&amp;#39;Is continuous&amp;#39;]

  node [shape=plaintext]
  iid [label=&amp;#39;Independent data&amp;#39;]
  noiid [label=&amp;#39;Not independent data&amp;#39;]
  ctsdat [label=&amp;#39;Continuous&amp;#39;]
  disdat [label=&amp;#39;Discrete&amp;#39;]
  mixdat [label=&amp;#39;Mixture&amp;#39;]
  

  # Edges
  isiid -&amp;gt; iid [dir=none,label=Yes]
  iid -&amp;gt; iscts [dir=none]
  
  iscts -&amp;gt; ctsdat [label=Yes] 
  ctsdat -&amp;gt; ols
  
  iscts -&amp;gt; disdat [label=No]
  disdat -&amp;gt; {probit logit}

  iscts -&amp;gt; mixdat [label=Both]
  mixdat -&amp;gt; tobit
  

  isiid -&amp;gt; noiid [dir=none, label=No]
  noiid -&amp;gt; ERGM
  
}

  
      &amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;htmlwidget-1&#34; style=&#34;width:576px;height:480px;&#34; class=&#34;grViz html-widget&#34;&gt;&lt;/div&gt;
&lt;script type=&#34;application/json&#34; data-for=&#34;htmlwidget-1&#34;&gt;{&#34;x&#34;:{&#34;diagram&#34;:&#34;\ndigraph boxes_and_circles {\n  # Defining models\n  node [shape = box]\n  \n  # Common world\n  ols [label=\&#34;Linear Regression\&#34;]\n  probit [label=Probit]\n  logit [label=Logit]\n  tobit [label=Tobit]\n\n  # Networks\n  ERGM\n  Siena\n  tERGM\n\n  # Decisions\n  node [shape=diamond]\n  isiid [label=\&#34;Is iid\&#34;]\n  iscts [label=\&#34;Is continuous\&#34;]\n\n  node [shape=plaintext]\n  iid [label=\&#34;Independent data\&#34;]\n  noiid [label=\&#34;Not independent data\&#34;]\n  ctsdat [label=\&#34;Continuous\&#34;]\n  disdat [label=\&#34;Discrete\&#34;]\n  mixdat [label=\&#34;Mixture\&#34;]\n  \n\n  # Edges\n  isiid -&gt; iid [dir=none,label=Yes]\n  iid -&gt; iscts [dir=none]\n  \n  iscts -&gt; ctsdat [label=Yes] \n  ctsdat -&gt; ols\n  \n  iscts -&gt; disdat [label=No]\n  disdat -&gt; {probit logit}\n\n  iscts -&gt; mixdat [label=Both]\n  mixdat -&gt; tobit\n  \n\n  isiid -&gt; noiid [dir=none, label=No]\n  noiid -&gt; ERGM\n  \n}\n\n  \n      &#34;,&#34;config&#34;:{&#34;engine&#34;:&#34;dot&#34;,&#34;options&#34;:null}},&#34;evals&#34;:[],&#34;jsHooks&#34;:[]}&lt;/script&gt;
</description>
    </item>
    
    <item>
      <title>New versions of ABCoptim and googlePublicData on CRAN</title>
      <link>/post/new-versions-of-abcoptim-and-googlepublicdata-on-cran/</link>
      <pubDate>Wed, 08 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/new-versions-of-abcoptim-and-googlepublicdata-on-cran/</guid>
      <description>&lt;p&gt;Finally, after a long wait, the R packages &lt;a href=&#34;https://github.com/gvegayon/googlePublicData&#34;&gt;googlePublicData&lt;/a&gt; (more than 2 years since the last update!) and &lt;a href=&#34;https://github.com/gvegayon/ABCoptim&#34;&gt;ABCoptim&lt;/a&gt; (roughly a year since the last update) have new versions on &lt;a href=&#34;https://cran.r-project.org&#34;&gt;CRAN&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The first just got an update that fixed some nasty bugs that were evident once you upload the data to &lt;a href=&#34;https://www.google.com/publicdata&#34;&gt;Google Public Data Explorer&lt;/a&gt;, and some other new internal stuff making the code nicer and easier to maintain. The later also got some small updates, a couple of new parameters matching &lt;code&gt;optim&lt;/code&gt;, and new methods for printing and plotting the results.&lt;/p&gt;
&lt;p&gt;Here is an example of &lt;code&gt;ABCoptim&lt;/code&gt; (from the manual)&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Loading the package
library(ABCoptim)

# This function has a minimum at (pi,pi)
fun &amp;lt;- function(x) {
  -cos(x[1])*cos(x[2])*exp(-((x[1] - pi)^2 + (x[2] - pi)^2))
}

# Calling the function!
abc_optim(rep(0,2), fun, lb=-10, ub=10, criter=50)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
##  An object of class -abc_answer- (Artificial Bee Colony Optim.):
##  par:
##     x[1]:  3.141593
##     x[2]:  3.141593
## 
##  value:
##           -1.000000
## 
##  counts:
##            208&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And here an example of what can you get with &lt;code&gt;googlePublicData&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;
&lt;iframe width=&#34;400&#34; height=&#34;325&#34; frameborder=&#34;0&#34; scrolling=&#34;no&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; src=&#34;http://www.google.com/publicdata/embed?ds=lt98u9rd734rn_&amp;amp;ctype=b&amp;amp;strail=true&amp;amp;bcs=d&amp;amp;nselm=s&amp;amp;met_y=porc_pob_pobre&amp;amp;scale_y=lin&amp;amp;ind_y=false&amp;amp;met_x=prom_de_escolaridad&amp;amp;scale_x=lin&amp;amp;ind_x=false&amp;amp;met_s=porc_hogares_con_computador&amp;amp;scale_s=lin&amp;amp;ind_s=false&amp;amp;idim=region:IX:RM:XII:VIII:VI:VII:X:V&amp;amp;ifdim=region&amp;amp;hl=en_US&amp;amp;dl=en&amp;amp;ind=false&amp;amp;icfg=lt98u9rd734rn_%253A51%253Aregion%26%26IX:::2009%7Clt98u9rd734rn_%253A51%253Aregion%26%26RM:::2009%7Clt98u9rd734rn_%253A51%253Aregion%26%26XII:::2009%7Clt98u9rd734rn_%253A51%253Aregion%26%26VIII:::2009%7Clt98u9rd734rn_%253A51%253Aregion%26%26VI:::2009%7Clt98u9rd734rn_%253A51%253Aregion%26%26VII:::2009%7Clt98u9rd734rn_%253A51%253Aregion%26%26X:::2009%7Clt98u9rd734rn_%253A51%253Aregion%26%26V:::2009&amp;amp;iconSize=0.5&#34;&gt;
&lt;/iframe&gt;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Reboot of rgexf</title>
      <link>/post/reboot-of-rgexf/</link>
      <pubDate>Wed, 08 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/reboot-of-rgexf/</guid>
      <description>&lt;p&gt;The &lt;a href=&#34;https://github.com/gvegayon/rgexf&#34;&gt;rgexf&lt;/a&gt; R package has been around a couple of years now, but without much going on on CRAN (my bad!). In this post I’ll show how to use the new version (on development and soon the be shipped to &lt;a href=&#34;https://cran.r-project.org/package=rgexf&#34;&gt;CRAN&lt;/a&gt;) together with the &lt;a href=&#34;https://github.com/USCCANA/netdiffuseR&#34;&gt;netdiffuseR&lt;/a&gt; R package to visualize a random diffusion process.&lt;/p&gt;
&lt;p&gt;First, we load all the packages that we will be using&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Loading the relevant packages
library(igraph, quietly = TRUE)
library(rgexf, quietly = TRUE)
library(netdiffuseR, quietly = TRUE)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next, we simulate a random diffusion network, in this case, a small-world network with 200 nodes spanning 20 time periods.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# A random diffusion network
set.seed(122)
net &amp;lt;- rdiffnet(n = 200, t=20, seed.graph = &amp;quot;small-world&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, we get the parameters ready, in this case, position using the function &lt;code&gt;layout_nicely&lt;/code&gt; from the igraph package, and colors using the Time of Adoption (toa)&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Setting viz attributes
pos &amp;lt;- cbind(layout_nicely(diffnet_to_igraph(net)[[1]]), 0)

# Coloring according to time of adoption. White ones are not
# adopters.
col &amp;lt;- diffnet.toa(net)
col &amp;lt;- col/20
col &amp;lt;- colorRamp(blues9, alpha = TRUE)(col)
col[is.na(col[,1]),1:3] &amp;lt;- 255
col[,4] &amp;lt;- .5&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Finally, we create the GEXF object and call the plot function. In this case we are using &lt;a href=&#34;https://github.com/raphv/gexf-js&#34;&gt;gexf-js&lt;/a&gt; (sigma-js will return in the future). Also, notice that we are only copying the files; the default behavior is to copy the files by setting &lt;code&gt;copy.only = TRUE&lt;/code&gt; and start the server using the &lt;a href=&#34;https://cran.r-project.org/package=servr&#34;&gt;servr&lt;/a&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Creating the gexf object
gf &amp;lt;- igraph.to.gexf(
  diffnet_to_igraph(net)[[1]],
  nodesVizAtt = list(
    color    = col,
    position = pos
    )
  )

# Plotting using gexf-js
plot(
  gf,
  edgeWidthFactor = .1,
  copy.only = TRUE,
  dir       = &amp;quot;../../static/post/reboot-of-rgexf/viz&amp;quot;
  )&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## GEXF graph successfully written at:
## /home/george/Documents/website/static/post/reboot-of-rgexf/viz/network.gexf&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can take a look at resulting website &lt;a href=&#34;viz&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;div id=&#34;session-info&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Session info&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;devtools::session_info()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Session info -------------------------------------------------------------&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  setting  value                       
##  version  R version 3.4.4 (2018-03-15)
##  system   x86_64, linux-gnu           
##  ui       X11                         
##  language en_US                       
##  collate  en_US.UTF-8                 
##  tz       America/Los_Angeles         
##  date     2018-06-18&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Packages -----------------------------------------------------------------&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  package        * version   date       source        
##  backports        1.1.2     2017-12-13 cran (@1.1.2) 
##  base           * 3.4.4     2018-03-16 local         
##  blogdown         0.6       2018-04-18 CRAN (R 3.4.4)
##  bookdown         0.7       2018-02-18 CRAN (R 3.4.3)
##  boot             1.3-20    2017-07-30 CRAN (R 3.4.1)
##  coda             0.19-1    2016-12-08 CRAN (R 3.4.0)
##  codetools        0.2-15    2016-10-05 CRAN (R 3.3.1)
##  colorspace       1.3-2     2016-12-14 CRAN (R 3.4.0)
##  compiler         3.4.4     2018-03-16 local         
##  datasets       * 3.4.4     2018-03-16 local         
##  devtools         1.13.5    2018-02-18 CRAN (R 3.4.3)
##  digest           0.6.15    2018-01-28 cran (@0.6.15)
##  evaluate         0.10.1    2017-06-24 CRAN (R 3.4.0)
##  ggplot2          2.2.1     2016-12-30 CRAN (R 3.4.3)
##  graphics       * 3.4.4     2018-03-16 local         
##  grDevices      * 3.4.4     2018-03-16 local         
##  grid             3.4.4     2018-03-16 local         
##  gridExtra        2.3       2017-09-09 CRAN (R 3.4.4)
##  gtable           0.2.0     2016-02-26 CRAN (R 3.4.0)
##  htmltools        0.3.6     2017-04-28 CRAN (R 3.4.0)
##  httpuv           1.4.3     2018-05-10 CRAN (R 3.4.4)
##  igraph         * 1.2.1     2018-03-10 CRAN (R 3.4.3)
##  knitr            1.20      2018-02-20 CRAN (R 3.4.3)
##  later            0.7.3     2018-06-08 CRAN (R 3.4.4)
##  lattice          0.20-35   2017-03-25 CRAN (R 3.3.3)
##  lazyeval         0.2.1     2017-10-29 CRAN (R 3.4.2)
##  magrittr         1.5       2014-11-22 CRAN (R 3.4.0)
##  MASS             7.3-50    2018-04-30 CRAN (R 3.4.4)
##  MatchIt          3.0.2     2018-01-09 CRAN (R 3.4.3)
##  Matrix           1.2-14    2018-04-09 CRAN (R 3.4.4)
##  memoise          1.1.0     2017-04-21 CRAN (R 3.4.0)
##  methods        * 3.4.4     2018-03-16 local         
##  munsell          0.5.0     2018-06-12 CRAN (R 3.4.4)
##  netdiffuseR    * 1.20.0    2018-06-07 CRAN (R 3.4.4)
##  network          1.13.0.1  2018-04-02 CRAN (R 3.4.4)
##  networkDynamic   0.9.0     2016-01-15 CRAN (R 3.4.0)
##  pillar           1.2.3     2018-05-25 CRAN (R 3.4.4)
##  pkgconfig        2.0.1     2017-03-21 CRAN (R 3.4.0)
##  plyr             1.8.4     2016-06-08 CRAN (R 3.4.0)
##  promises         1.0.1     2018-04-13 CRAN (R 3.4.4)
##  R6               2.2.2     2017-06-17 CRAN (R 3.4.4)
##  Rcpp             0.12.17   2018-05-18 CRAN (R 3.4.4)
##  rgexf          * 0.16.0    2018-02-05 local         
##  rlang            0.2.1     2018-05-30 CRAN (R 3.4.4)
##  rmarkdown        1.10      2018-06-11 CRAN (R 3.4.4)
##  rprojroot        1.3-2     2018-01-03 cran (@1.3-2) 
##  scales           0.5.0     2017-08-24 CRAN (R 3.4.1)
##  servr            0.10      2018-05-30 CRAN (R 3.4.4)
##  sna              2.4       2016-08-08 CRAN (R 3.4.0)
##  SparseM          1.77      2017-04-23 CRAN (R 3.4.0)
##  statnet.common   4.1.2     2018-06-05 CRAN (R 3.4.4)
##  stats          * 3.4.4     2018-03-16 local         
##  stringi          1.2.3     2018-06-12 CRAN (R 3.4.4)
##  stringr          1.3.1     2018-05-10 CRAN (R 3.4.4)
##  tibble           1.4.2     2018-01-22 cran (@1.4.2) 
##  tools            3.4.4     2018-03-16 local         
##  utils          * 3.4.4     2018-03-16 local         
##  viridis          0.5.1     2018-03-29 CRAN (R 3.4.3)
##  viridisLite      0.3.0     2018-02-01 cran (@0.3.0) 
##  withr            2.1.2     2018-03-15 cran (@2.1.2) 
##  xfun             0.2       2018-06-16 CRAN (R 3.4.4)
##  XML              3.98-1.11 2018-04-16 CRAN (R 3.4.4)
##  yaml             2.1.19    2018-05-01 CRAN (R 3.4.4)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;last-updated&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Last updated&lt;/h2&gt;
&lt;p&gt;This post was last updated on 2017-11-13 to reflect a small change in &lt;code&gt;rgexf&lt;/code&gt; that makes it easier to process colors and positions.&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Research != Software dev?</title>
      <link>/post/research-software-dev/</link>
      <pubDate>Wed, 25 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/research-software-dev/</guid>
      <description>&lt;p&gt;Some times I feel like I&amp;rsquo;m in the wrong place. At least a few times, while talking to scientists, I&amp;rsquo;ve realized that people don&amp;rsquo;t think of scientific software the same way I do, this is, as actual research. While I know I&amp;rsquo;m not a fancy computer/informatics scientist, I do believe that scientific software development is underestimated.&lt;/p&gt;

&lt;p&gt;When I was in the visiting day at Caltech, I recall that one of the questions that our host did to us during the visiting day was &amp;ldquo;what makes you excited about coming to Caltech?&amp;rdquo; and my response was something like &amp;ldquo;creating new things with other people!&amp;rdquo;, which in this context is obiously tools! Later on while on grad school I understood that people was not as excited as I was on that. And now a days, that same feeling of misfits has hit me a couple of times while talking to professors and grad students.&lt;/p&gt;

&lt;p&gt;The thing is, I still believe scientific software development is science too. While my claim may be a bit biased, since I really love R and &amp;ldquo;creating things with other people&amp;rdquo;, I know that I&amp;rsquo;m not alone (see for example []). A couple of arguments:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Theory is very important, yes, but in order to be useful it has to be available to apply/make use of it in some fashion. This is particlarly relevant for statistics/economics. Now a days, with all the computing power at the tip of our hands there&amp;rsquo;s no excuse for researchers to create tools that make whatever they are doing available.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Writing scientific software helps theory advance. Imagine the following scenario: a fancy new method/model is developed and published in a fancy journal, then&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>Environments in R Rock</title>
      <link>/post/environments-in-r-rock/</link>
      <pubDate>Mon, 02 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/environments-in-r-rock/</guid>
      <description>&lt;p&gt;Last week I found myself working on &lt;a href=&#34;https://github.com/USCCANA/netdiffuseR&#34; target=&#34;_blank&#34;&gt;netdiffuseR&lt;/a&gt; trying to establish nice defaults for some plotting functions with the following goals:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;p&gt;Make the code easy to maintain: So if I need to change defaults I just change a few lines and that works for all plot functions,&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Make the code easy to see in the manual (help) file: So is easier to the user to focus on the main features of a plot rather than looking at a large description of a function with lots of parameters and lots of defaults, and&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Make the code hopefully efficient: Not that I care that much, but if I’m going to be passing arguments across functions, it better be efficient!&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;So, long story short, I came up with the following approach:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;p&gt;Create a list of defaults included in the package: This is actually something that I’ve already seen in some other places, like for example &lt;a href=&#34;https://github.com/igraph/rigraph/blob/665d71ebd40cdfe9b996a4f50c35d65b791e4102/R/par.R&#34; target=&#34;_blank&#34;&gt;igraph&lt;/a&gt;, they have a couple of environments that set plotting defaults.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Make a heavy use of the ellipsis! &lt;code&gt;...&lt;/code&gt; So I can actually grab whatever the user passed through it, and later modify the arguments (I’ll show this in an example)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Use 1. to modify 2. at will… with environments!&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;While I’m not sure this is the most efficient way of doing this (and I’m pretty sure that I’m not the first person to do something like this), it works for what I’m doing right now. The following piece of code illustrates how this works.&lt;/p&gt;
&lt;p&gt;This is a list of the defaults that we would like all the functions to have:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# This list holds the default parameters
defaults &amp;lt;- list(color=&amp;quot;steelblue&amp;quot;, add=FALSE)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This function is the one that sets the defaults, follow the comments to see how it works:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# This function sets the defaults giving the name of an object that holds the
# parameters... or at least should hold them!
set.defaults &amp;lt;- function(obj_name) {
  
  # Where was this function called from? This way we get
  # the parent frame (the environment from where the function was called)
  # this actually holds all the elements, but works as a reference, so no copy!
  env &amp;lt;- parent.frame()
  
  # Now we loop throught the defaults that I&amp;#39;ve specified
  # in -defaults-
  for (d in names(defaults))
    # If -d- hasn&amp;#39;t been specified, then set it!
    if (!length(env[[obj_name]][[d]]))
      env[[obj_name]][[d]] &amp;lt;- defaults[[d]]
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is a function that illustrates how everything works together. So we can pass extra arguments with the ellipsis, we store them in a list called &lt;code&gt;dots&lt;/code&gt; (I’m sure there must be a more efficient way of doing this, but it’s OK for now :]), sets the defaults calling &lt;code&gt;set.defaults&lt;/code&gt;, and returns the &lt;code&gt;dots&lt;/code&gt; list:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;f &amp;lt;- function(...) {
  
  # Getting the dots
  dots &amp;lt;- list(...)
  
  # Setting defaults
  set.defaults(&amp;quot;dots&amp;quot;)
  
  # Did we got them?
  return(dots)
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now let’s see if it works!&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;f()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## $color
## [1] &amp;quot;steelblue&amp;quot;
## 
## $add
## [1] FALSE&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;f(color=&amp;quot;green&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## $color
## [1] &amp;quot;green&amp;quot;
## 
## $add
## [1] FALSE&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As expected, the first call of the function returns the default parameters. In the second call, since I specified &lt;code&gt;&amp;quot;green&amp;quot;&lt;/code&gt;, the function &lt;code&gt;set.defaults&lt;/code&gt; only set the argument &lt;code&gt;add&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;You can read more about environments in &lt;a href=&#34;http://adv-r.had.co.nz/Environments.html&#34; target=&#34;_blank&#34;&gt;Hadley Wickham’s Advance R&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Sistema de Pensiones en Chile</title>
      <link>/post/sistema-de-pensiones-en-chile/</link>
      <pubDate>Fri, 29 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/sistema-de-pensiones-en-chile/</guid>
      <description>&lt;p&gt;Con todo el tema del plebiscito anti AFP (porque no es más que eso), y varios correos que he recibido en los últimos años con personas preguntándome acerca de como funciona el sistema de pensiones (que me parece genial!), me decidí a escribir este pequeño post con algunas de las ideas que tengo al respecto. Y qué mejor forma que partir por los mitos sobre el sistema!&lt;/p&gt;
&lt;div id=&#34;mitos-sobre-el-sistema-de-pensiones&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Mitos sobre el sistema de pensiones&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://www.latercera.com/noticia/mitos-y-verdades-del-sistema-de-pensiones-chileno/&#34; class=&#34;uri&#34;&gt;http://www.latercera.com/noticia/mitos-y-verdades-del-sistema-de-pensiones-chileno/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.quepasa.cl/articulo/negocios/2017/08/mitos-leyendas-y-pensiones-parte-i.shtml/&#34; class=&#34;uri&#34;&gt;http://www.quepasa.cl/articulo/negocios/2017/08/mitos-leyendas-y-pensiones-parte-i.shtml/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.pulso.cl/empresas-mercados/los-ocho-mitos-y-realidades-del-sistema-de-pensiones-chileno/&#34; class=&#34;uri&#34;&gt;http://www.pulso.cl/empresas-mercados/los-ocho-mitos-y-realidades-del-sistema-de-pensiones-chileno/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.uchile.cl/noticias/125298/no--afp-mitos-y-realidades&#34; class=&#34;uri&#34;&gt;http://www.uchile.cl/noticias/125298/no--afp-mitos-y-realidades&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.aafp.cl/mitos-y-realidades-de-los-sistemas-de-pensiones/&#34; class=&#34;uri&#34;&gt;https://www.aafp.cl/mitos-y-realidades-de-los-sistemas-de-pensiones/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.elmercurio.com/Inversiones/Noticias/Pensiones/2015/11/19/Mitos-y-realidades-del-sistema-de-pensiones.aspx&#34; class=&#34;uri&#34;&gt;http://www.elmercurio.com/Inversiones/Noticias/Pensiones/2015/11/19/Mitos-y-realidades-del-sistema-de-pensiones.aspx&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www8.gsb.columbia.edu/faculty/jstiglitz/sites/jstiglitz/files/2001_Rethinking_Pension_Reform_Ten_Myths.pdf&#34; class=&#34;uri&#34;&gt;https://www8.gsb.columbia.edu/faculty/jstiglitz/sites/jstiglitz/files/2001_Rethinking_Pension_Reform_Ten_Myths.pdf&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;El problema es que hay muchos mitos y los “líderes” son los que los difunden. Aquí van algunos:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Te calculan la pension hasta los 110 años!&lt;/strong&gt; Falso! Cuando se calcula el monto de pension por retiro programado (la modalidad mas comun), se utilizan lo que se conocen como tablas de mortalidad. En ellas se considera la posibilidad (que es diferente a certeza) de sobrevivir hasta los 110 años. De no usar esas tablas la alternativa seria, por ejemplo, calcular pago de pensiones hasta los 85 años (que es mas menos la edad de sobrevida promedio del hombre en Chile), y que pasa si pasas los 85, 90 años? Eso es lo que se trata de evitar.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Las AFP se estan haciendo ricas con mi plata!&lt;/strong&gt; Falso. Las AFP cobran comision por contribución, lo que quiere decir que te cobran por cada aporte que tu haces, en otras palabras, las AFPs NO TOCAN TU FONDO DE PENSION. Hoy las comisiones van de 0.41% (Planvital) a 1.5% (Cuprum)… Si quieres que las AFP no ganen tanto, entonces cambiate a una que cobre poco…&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Trabaje toda mi vida y me pagan una &lt;span class=&#34;math inline&#34;&gt;\(\#\#\)&lt;/span&gt;?% de pensión! Obviamente la culpa es del sistema!&lt;/strong&gt; Lamentablemente no es así. Luego de cientos de estudios científicos muy complejos, los expertos llegaron a increíble conclusión de que para gastar más mañana hay que ahorrar más hoy. Si hay algo que se debería cambiar en el sistema, es que la tasa de contribución deberia de ser de al menos 15% y sin tope. Hoy es de 10%.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Mi [[elija un familiar]] trabajó toda su vida, se jubiló y ahora gana mucho menos de la mitad!&lt;/strong&gt; Tiene que ver con lo anterior. Resulta que muchas personas que se están jubilando con el “sistema nuevo” se vieron perjudicadas por faltas por parte de sus empleadores. Muchas personas o cotizaron por el mínimo (que equivale a decir que cotizaron por menos del 10%), o de frentón llegaron a arreglos con sus empleadores donde les pagaron “retroactivamente” las cotizaciones. El problema es el siguiente, las cotizaciones más importantes son las de los primeros años. Al momento de acercarse a la edad de jubilación, lo único que queda es aportar más dinero en grandes cantidades, pero si nunca ahorraste cuando joven, no puedes esperar tener una pensión similar a la de tus últimos años trabajando.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;El estado manejaría mejor la plata&lt;/strong&gt; Aun que lo dudo, puede ser. Pero de todas formas, como ya he dicho antes, la clave está en aumentar la tasa de ahorro. Aún cuando tengas al mejor administrador de fondos (ya sea estatal o privado), nada cambiará si la tasa de ahorro no cambia.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Al final del día, si bien el sistema no es perfecto, lo unique que si es seguro es que volver a un sistema de reparto no es solución. En mi opinión, los sistemas mixtos (que de hecho es lo que tenemos en Chile hoy) son la solución, y quizás dar más opciones de ahorro a la gente. Pero al final del día, la clave está en ahorrar más. Si no ahorramos lo suficiente, el sistema en el que se administre nuestro dinero da lo mismo…&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;simulando-politica&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Simulando política&lt;/h2&gt;
&lt;p&gt;Para entender de mejor manera el problema, a continuación presento un set de simulaciones sencillas donde varío dos parámetros del sistema de pensiones: La tasa de contribución, y el año de retiro. Antes de continuar es importante notar que estas simulaciones se realizan bajo los siguientes supuestos:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;p&gt;No hay lagunas, en otras palabras, el trabajador nunca está desempleado&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Sólo existe un fondo, por lo tanto no hablaré de los tipos de fondos en que se invierte el dinero.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Al momento del retiro, el cálculo de la pensión se hace assumiendo que la persona es soltera.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Las siguientes equaciones describen el modelo de simulación:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
\begin{aligned}
I_1 &amp;amp;= 300 \\
I_t &amp;amp;= I_{t-1}\times\left(1 + \frac{r_I}{\log(t)}\right), \quad t&amp;gt;1\mbox{ y }r_I\sim N(0.02, 0.02)\\
C_t &amp;amp;= 12I_{t}\times a\\
S_t &amp;amp; = (S_{t-1} + C_t)\times(1 + R_t),\quad R_t\sim N(.04, .1)
\end{aligned}
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Donde &lt;span class=&#34;math inline&#34;&gt;\(I_t\)&lt;/span&gt; es el nivel de ingreso (remuneración) en el año &lt;span class=&#34;math inline&#34;&gt;\(t\)&lt;/span&gt;, &lt;span class=&#34;math inline&#34;&gt;\(r_t\)&lt;/span&gt; es la tasa de crecimiento anual del ingreso en el año &lt;span class=&#34;math inline&#34;&gt;\(t\)&lt;/span&gt;, &lt;span class=&#34;math inline&#34;&gt;\(S_t\)&lt;/span&gt; es el saldo del fondo de capitalización individual en el año &lt;span class=&#34;math inline&#34;&gt;\(t\)&lt;/span&gt;, &lt;span class=&#34;math inline&#34;&gt;\(C_t\)&lt;/span&gt; es el monto anual de contribución en el año &lt;span class=&#34;math inline&#34;&gt;\(t\)&lt;/span&gt;, y &lt;span class=&#34;math inline&#34;&gt;\(a\)&lt;/span&gt; es la tasa de contribución mensual.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/post/2017-09-29-sistema-de-pensiones-en-chile_files/figure-html/Simulando-renta-1.svg&#34; width=&#34;576&#34; /&gt;&lt;/p&gt;
&lt;!-- html table generated in R 3.4.4 by xtable 1.8-2 package --&gt;
&lt;!-- Mon Jun 18 15:49:40 2018 --&gt;
&lt;table border=&#34;1&#34;&gt;
&lt;caption align=&#34;bottom&#34;&gt;
Distribución de Rentabilidad Anual simulada (en %)
&lt;/caption&gt;
&lt;tr&gt;
&lt;th&gt;
2.5%
&lt;/th&gt;
&lt;th&gt;
10%
&lt;/th&gt;
&lt;th&gt;
50%
&lt;/th&gt;
&lt;th&gt;
90%
&lt;/th&gt;
&lt;th&gt;
97.5%
&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;
-15.64
&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;
-8.82
&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;
4.02
&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;
16.79
&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;
23.64
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;!-- html table generated in R 3.4.4 by xtable 1.8-2 package --&gt;
&lt;!-- Mon Jun 18 15:49:41 2018 --&gt;
&lt;table border=&#34;1&#34;&gt;
&lt;caption align=&#34;bottom&#34;&gt;
Distribución de tasas de reemplazo fijando tasa de cotizacion en 7%. Filas representan edad de retiro y columnas percentil.
&lt;/caption&gt;
&lt;tr&gt;
&lt;th&gt;
&lt;/th&gt;
&lt;th&gt;
2.5%
&lt;/th&gt;
&lt;th&gt;
10%
&lt;/th&gt;
&lt;th&gt;
50%
&lt;/th&gt;
&lt;th&gt;
90%
&lt;/th&gt;
&lt;th&gt;
97.5%
&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;
60
&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;
11.48
&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;
14.42
&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;
22.07
&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;
34.93
&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;
44.33
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;
63
&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;
13.87
&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;
17.48
&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;
27.72
&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;
44.20
&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;
56.54
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;
65
&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;
15.60
&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;
19.97
&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;
32.00
&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;
52.14
&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;
68.49
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;
67
&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;
17.83
&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;
22.98
&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;
37.20
&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;
61.85
&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;
80.99
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;!-- html table generated in R 3.4.4 by xtable 1.8-2 package --&gt;
&lt;!-- Mon Jun 18 15:49:41 2018 --&gt;
&lt;table border=&#34;1&#34;&gt;
&lt;caption align=&#34;bottom&#34;&gt;
Distribución de tasas de reemplazo fijando tasa de cotizacion en 10%. Filas representan edad de retiro y columnas percentil.
&lt;/caption&gt;
&lt;tr&gt;
&lt;th&gt;
&lt;/th&gt;
&lt;th&gt;
2.5%
&lt;/th&gt;
&lt;th&gt;
10%
&lt;/th&gt;
&lt;th&gt;
50%
&lt;/th&gt;
&lt;th&gt;
90%
&lt;/th&gt;
&lt;th&gt;
97.5%
&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;
60
&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;
16.40
&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;
20.60
&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;
31.53
&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;
49.90
&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;
63.34
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;
63
&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;
19.82
&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;
24.97
&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;
39.60
&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;
63.14
&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;
80.77
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;
65
&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;
22.28
&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;
28.53
&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;
45.71
&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;
74.48
&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;
97.85
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;
67
&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;
25.47
&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;
32.83
&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;
53.14
&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;
88.35
&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;
115.70
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;!-- html table generated in R 3.4.4 by xtable 1.8-2 package --&gt;
&lt;!-- Mon Jun 18 15:49:41 2018 --&gt;
&lt;table border=&#34;1&#34;&gt;
&lt;caption align=&#34;bottom&#34;&gt;
Distribución de tasas de reemplazo fijando tasa de cotizacion en 15%. Filas representan edad de retiro y columnas percentil.
&lt;/caption&gt;
&lt;tr&gt;
&lt;th&gt;
&lt;/th&gt;
&lt;th&gt;
2.5%
&lt;/th&gt;
&lt;th&gt;
10%
&lt;/th&gt;
&lt;th&gt;
50%
&lt;/th&gt;
&lt;th&gt;
90%
&lt;/th&gt;
&lt;th&gt;
97.5%
&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;
60
&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;
24.60
&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;
30.90
&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;
47.30
&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;
74.85
&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;
95.00
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;
63
&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;
29.73
&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;
37.46
&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;
59.39
&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;
94.71
&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;
121.16
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;
65
&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;
33.43
&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;
42.79
&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;
68.57
&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;
111.73
&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;
146.77
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;
67
&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;
38.21
&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;
49.25
&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;
79.72
&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;
132.53
&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;
173.55
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>An Unexpected Tobit Fact</title>
      <link>/post/an-unexpected-tobit-fact/</link>
      <pubDate>Mon, 25 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/an-unexpected-tobit-fact/</guid>
      <description>&lt;p&gt;Hoy recibí un correo inesperado de mi jefe aca en USC quejándose (preguntándome mas bien) que por qué algunos pares de especificaciones Tobit eran idénticas. Mi primera impresión fue “seguro R guardó la misma tabla con nombre distinto… ups!”, algo que podía ser posible pues, además de que soy humano, el proceso para correr los modelos lo había automatizado pues en total son 270 especificaciones… no iba a escribir una por una!&lt;/p&gt;
&lt;p&gt;Al volver a correr un par de modelos de manera “manual”, me di cuenta que efectivamente los resultados eran idénticos, algo que no esperaba. Cuáles eran las especifaciones?&lt;/p&gt;
&lt;span class=&#34;math display&#34;&gt;\[\begin{align*}
y &amp;amp; = X\beta + \varepsilon,\quad \mbox{if }y_{miss} \neq 0\tag{1} \\
y &amp;amp; = X\beta + y_{miss} + \varepsilon \tag{2}
\end{align*}\]&lt;/span&gt;
&lt;p&gt;Donde y_miss es una dummy igual a 0 si es que y es missing. En otras palabras, el primer modelo excluye aquellas observaciones en las cuales y es missing, y el segundo las incluye assumiendo que son iguales a 0, pero además agrega una dummy indicando cuando tal supuesto se aplicó. Se que están pensando que el modelo es endógeno y todo eso (no me miren feo), pero solo lo corrí para complacer a mi jefe y ver que pasaba :). Obviamente no incluiremos ese modelo en nuestro paper!&lt;/p&gt;
&lt;p&gt;Para estar seguro de lo que estaba haciendo, decidí hacer una simulación con datos similares, una variable y truncada en &amp;lt; 0 y aleatoriamente agregando zeros en y para simular la imputación que hicimos en nuestros datos. Sorprendentemente, ambas especificaciones resultaron en lo mismo!&lt;/p&gt;
&lt;p&gt;Acá va el codigo:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;rm(list = ls())
library(AER)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Loading required package: car&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Loading required package: carData&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Loading required package: lmtest&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Loading required package: zoo&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
## Attaching package: &amp;#39;zoo&amp;#39;&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## The following objects are masked from &amp;#39;package:base&amp;#39;:
## 
##     as.Date, as.Date.numeric&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Loading required package: sandwich&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Loading required package: survival&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Seeds and parameters
set.seed(1123)
N &amp;lt;- 1e3
K &amp;lt;- 4

# Data Generating Proccess
a     &amp;lt;- 5
b     &amp;lt;- cbind(runif(K, -1,1))
X     &amp;lt;- matrix(rnorm(N*K), ncol = K)
y        &amp;lt;- a + X %*% b + rnorm(N)
y[y &amp;lt; 0] &amp;lt;- 0

# The zero dummy
zero_dummy &amp;lt;- cbind(runif(N)&amp;gt;.9) # 10% of non-reporting
y[zero_dummy] &amp;lt;- 0

# Running the specifications
summary(tobit(y~ X, subset = !zero_dummy))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
## Call:
## tobit(formula = y ~ X, subset = !zero_dummy)
## 
## Observations:
##          Total  Left-censored     Uncensored Right-censored 
##            908              1            907              0 
## 
## Coefficients:
##             Estimate Std. Error z value Pr(&amp;gt;|z|)    
## (Intercept)  4.97518    0.03166 157.146  &amp;lt; 2e-16 ***
## X1           0.49842    0.03244  15.364  &amp;lt; 2e-16 ***
## X2           0.74734    0.03165  23.611  &amp;lt; 2e-16 ***
## X3           0.69200    0.03063  22.589  &amp;lt; 2e-16 ***
## X4           0.13911    0.03028   4.595 4.33e-06 ***
## Log(scale)  -0.04781    0.02348  -2.036   0.0418 *  
## ---
## Signif. codes:  0 &amp;#39;***&amp;#39; 0.001 &amp;#39;**&amp;#39; 0.01 &amp;#39;*&amp;#39; 0.05 &amp;#39;.&amp;#39; 0.1 &amp;#39; &amp;#39; 1
## 
## Scale: 0.9533 
## 
## Gaussian distribution
## Number of Newton-Raphson Iterations: 5 
## Log-likelihood: -1245 on 6 Df
## Wald-statistic:  1346 on 4 Df, p-value: &amp;lt; 2.22e-16&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;summary(tobit(y~ X + zero_dummy))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
## Call:
## tobit(formula = y ~ X + zero_dummy)
## 
## Observations:
##          Total  Left-censored     Uncensored Right-censored 
##           1000             93            907              0 
## 
## Coefficients:
##                 Estimate Std. Error z value Pr(&amp;gt;|z|)    
## (Intercept)      4.97518    0.03166 157.146  &amp;lt; 2e-16 ***
## X1               0.49842    0.03244  15.364  &amp;lt; 2e-16 ***
## X2               0.74734    0.03165  23.611  &amp;lt; 2e-16 ***
## X3               0.69200    0.03063  22.589  &amp;lt; 2e-16 ***
## X4               0.13911    0.03028   4.595 4.33e-06 ***
## zero_dummyTRUE -12.33751  335.69958  -0.037   0.9707    
## Log(scale)      -0.04781    0.02348  -2.036   0.0418 *  
## ---
## Signif. codes:  0 &amp;#39;***&amp;#39; 0.001 &amp;#39;**&amp;#39; 0.01 &amp;#39;*&amp;#39; 0.05 &amp;#39;.&amp;#39; 0.1 &amp;#39; &amp;#39; 1
## 
## Scale: 0.9533 
## 
## Gaussian distribution
## Number of Newton-Raphson Iterations: 16 
## Log-likelihood: -1245 on 7 Df
## Wald-statistic:  1346 on 5 Df, p-value: &amp;lt; 2.22e-16&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Luego de darle algunas vueltas, me di cuenta que lo que pasaba era los siguiente: En el modelo 1, MLE hace su trabajo, estima los parametros y ya. En el segundo modelo, cuando agregamos las observaciones con y=0 por supuesto junto con la dummy zero_dummy, lo unico que cambia de la función de Máxima Verosimilitud es el componente Probit (pues solo estamos agregando ceros), el componente OLS se mantiene igual pues zero_dummy = 0 en esa parte de la función. Luego, en la parte Tobit, y aquí es donde no estoy tan seguro como explicar esto con matemática, el MLE estima el modelo y, dado que zero_dummy predice a la parfección ceros cuando es igual a 1, asigna un valor grande a su coeficiente, haciendo que al final del día las observaciones adicionales no agreguen información al modelo, lo que termina en obtener el mismo set de estimadores.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Yet another plot of R&#39;s colors()</title>
      <link>/post/yet-another-plot-of-r-s-colors/</link>
      <pubDate>Fri, 15 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/yet-another-plot-of-r-s-colors/</guid>
      <description>&lt;p&gt;I know there are plenty of these online, but I just thought about having my own for quick reference…&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ncols &amp;lt;- ceiling(sqrt(length(colors())))^2
dat &amp;lt;- matrix(1:ncols, sqrt(ncols))
image(dat, col = colors()[1:ncols])
pos &amp;lt;- seq(0, 1, length.out = sqrt(ncols))
pos &amp;lt;- lapply(pos, function(x) cbind(x, pos))
pos &amp;lt;- do.call(rbind, pos)

ncols &amp;lt;- length(colors())
text(x=pos[1:ncols,2], y=pos[1:ncols,1], labels = 1:ncols, cex=.75, srt=60)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2017-09-15-yet-another-plot-of-r-s-colors_files/figure-html/fancy-colors-1.svg&#34; width=&#34;768&#34; height=&#34;800px&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
