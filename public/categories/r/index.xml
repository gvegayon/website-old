<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>R on GGVY</title>
    <link>https://ggvy.cl/categories/r/</link>
    <description>Recent content in R on GGVY</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2016 George G. Vega Yon</copyright>
    <lastBuildDate>Tue, 16 Jan 2018 00:00:00 +0000</lastBuildDate>
    <atom:link href="/categories/r/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Working with sparse matrices in C&#43;&#43;</title>
      <link>https://ggvy.cl/post/working-with-sparse-matrices-in-cpp/</link>
      <pubDate>Tue, 16 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>https://ggvy.cl/post/working-with-sparse-matrices-in-cpp/</guid>
      <description>&lt;p&gt;Working with sparse matrices is a big part of my day. Social networks are inherently sparse, so sparse matrices are the best buds you can get when representing large networks as adjacency matrices.&lt;a href=&#34;#fn1&#34; class=&#34;footnoteRef&#34; id=&#34;fnref1&#34;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; As so, I usually find myself trying to take advantage of their structure as, contrasting dense matrices, we don’t need to write nested &lt;code&gt;for(i...) for (j...)&lt;/code&gt; loops to work with them, instead, sometimes all what we want is just to extract/work with its non-zero elements.&lt;/p&gt;
&lt;p&gt;About a year ago, while working on &lt;a href=&#34;https://github.com/USCCANA/netdiffuseR&#34;&gt;netdiffuseR&lt;/a&gt;, I was struggling a bit to write down an efficient way of iterating through non-zero elements. Right after writing my own function to return the position of non-zero elements, I wrote &lt;a href=&#34;http://conradsanderson.id.au/&#34;&gt;Dr Conrad Sanderson&lt;/a&gt;–one of the masterminds behind armadillo–and learned that a nice solution for this was already included in armadillo, &lt;a href=&#34;http://arma.sourceforge.net/docs.html#iterators_mat&#34;&gt;matrix iterators&lt;/a&gt;.&lt;/p&gt;
&lt;div id=&#34;a-simple-example&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;A simple example&lt;/h2&gt;
&lt;p&gt;First off, to work with iterators for sparse matrices we will look at the simplest example: extracting positions and values from the matrix.&lt;/p&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;RcppArmadillo.h&amp;gt;
// [[Rcpp::depends(RcppArmadillo)]]

using namespace Rcpp;

// [[Rcpp::export]]
NumericMatrix sp_show_storage(arma::sp_mat x) {
  
  NumericMatrix ans(x.n_nonzero, 3u);
  int i = 0;
  for(arma::sp_mat::const_iterator it = x.begin(); it != x.end(); ++it) {
    
    ans(i, 0) = it.row(); // Row position
    ans(i, 1) = it.col(); // Col position
    ans(i++, 2) = *it;    // Value
    
  }
  
  // Adding colnames
  colnames(ans) = CharacterVector::create(&amp;quot;row&amp;quot;, &amp;quot;col&amp;quot;, &amp;quot;val&amp;quot;);
    
  return ans;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here is a fake (not at all) sparse matrix of size 3x3 in which each of the non-zero elements &lt;code&gt;(i,j)&lt;/code&gt; are in the form of &lt;code&gt;ij&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(Matrix)
M &amp;lt;- matrix(0,nrow=3, ncol=3)
M[1,2] &amp;lt;- 12
M[2,1] &amp;lt;- 21
M[2,3] &amp;lt;- 23
M[3,2] &amp;lt;- 32
(M &amp;lt;- methods::as(M, &amp;quot;dgCMatrix&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 3 x 3 sparse Matrix of class &amp;quot;dgCMatrix&amp;quot;
##              
## [1,]  . 12  .
## [2,] 21  . 23
## [3,]  . 32  .&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And here is what &lt;code&gt;sp_show_storage&lt;/code&gt; returns from this sparse matrix.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;sp_show_storage(M)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##      row col val
## [1,]   1   0  21
## [2,]   0   1  12
## [3,]   2   1  32
## [4,]   1   2  23&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;what-about-iterating-through-rows-instead-of-columns&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;What about iterating through rows instead of columns?&lt;/h2&gt;
&lt;p&gt;The following lines of code create three functions, &lt;code&gt;sp_iterate&lt;/code&gt;, &lt;code&gt;sp_row_iterate&lt;/code&gt;, and &lt;code&gt;sp_t_iterate&lt;/code&gt;, this is, a column-major iterator, a row-major iterator, and a pseudo row-major iterator (I first transpose the matrix, and then iterate using the column-major iterator), respectively.&lt;/p&gt;
&lt;pre class=&#34;cpp&#34;&gt;&lt;code&gt;#include &amp;lt;RcppArmadillo.h&amp;gt;
// [[Rcpp::depends(RcppArmadillo)]]

using namespace Rcpp;

// Column-major method iterator (default)
// [[Rcpp::export]]
arma::vec sp_iterate(arma::sp_mat x) {
  
  arma::vec ans(x.n_nonzero);
  
  typedef arma::sp_mat::const_iterator iter;
  int k = 0;
  for (iter i = x.begin(); i != x.end(); i++)
    ans.at(k++) = *i;
  
  return ans;
}

// Sort-of row-major method iterator. For this to work, we first need to tell
// armadillo which row we would like to look at... this doesn&amp;#39;t look nice.
// [[Rcpp::export]]
arma::vec sp_row_iterate(arma::sp_mat x) {
  
  arma::vec ans(x.n_nonzero);
  
  typedef arma::sp_mat::const_row_iterator iter;
  int k = 0;
  for (unsigned int i = 0; i &amp;lt; x.n_rows; i++)
    for (iter j = x.begin_row(i); j != x.end_row(i); ++j)
      ans.at(k++) = *j;
  
  return ans;
}

// Another sort-of row-major method iterator. Now, instead of using
// `const_row_iterator`, we use `const_iterator` but transpose the matrix first
// [[Rcpp::export]]
arma::vec sp_t_iterate(arma::sp_mat x) {
  
  arma::vec ans(x.n_nonzero);
  arma::sp_mat z = x.t();
  
  int k = 0;
  typedef arma::sp_mat::const_iterator iter;
  for (iter i = z.begin(); i != z.end(); ++i)
    ans.at(k++) = *i;
  
  return ans;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And here is what we get from calling each of the functions:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;data.frame(
  col_major  = sp_iterate(M),
  row_major  = sp_row_iterate(M),
  row_major2 = sp_t_iterate(M)
)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   col_major row_major row_major2
## 1        21        12         12
## 2        12        21         21
## 3        32        23         23
## 4        23        32         32&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now what about speed?&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;set.seed(1)
n &amp;lt;- 200
M &amp;lt;- methods::as(
  matrix(runif(n^2) &amp;lt; .001, nrow = n),
  &amp;quot;dgCMatrix&amp;quot;
)

microbenchmark::microbenchmark(
   sp_row_iterate(M),
   sp_t_iterate(M),
   times = 100, unit=&amp;quot;relative&amp;quot;
)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Unit: relative
##               expr      min       lq     mean   median       uq      max
##  sp_row_iterate(M) 2067.134 1644.167 581.3817 1245.932 724.6805 23.16452
##    sp_t_iterate(M)    1.000    1.000   1.0000    1.000   1.0000  1.00000
##  neval cld
##    100   b
##    100  a&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It turns out that &lt;code&gt;const_row_iterator&lt;/code&gt; implementation is significantly slower because of how the data is stored. The &lt;code&gt;SpMat&lt;/code&gt; object from &lt;code&gt;armadillo&lt;/code&gt; uses the &lt;a href=&#34;https://en.wikipedia.org/wiki/Row-_and_column-major_order&#34;&gt;Column-Major Order&lt;/a&gt; method for storing the sparse matrix, which means that, whenever we want to iterate through columns this is as easy as just reading the values as they are stored. On the other hand, iterating through row-major order implies doing a somewhat exhaustive search of non-empty cells at each row, which eventually becomes computationally very inefficient.&lt;/p&gt;
&lt;p&gt;For those of you who like looking at source code, you can take a look at the way the &lt;code&gt;const_row_iterator&lt;/code&gt; are implemented &lt;a href=&#34;https://fossies.org/dox/armadillo-8.300.3/SpMat__iterators__meat_8hpp_source.html&#34;&gt;here&lt;/a&gt; starting line 392. Here is an extract from the code:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This is irritating because we don’t know where the elements are in each row. What we will do is loop across all columns looking for elements in row 0 (and add to our sum), then in row 1, and so forth, until we get to the desired position.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I can’t agree more with that!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;footnotes&#34;&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id=&#34;fn1&#34;&gt;&lt;p&gt;It is important to notice that a lot of times using sparse matrices is not as useful as it sounds. Before embracing sparseness, think about whether your data needs it. Sparse networks can, sometimes, take you to the wrong place as when your matrix is &lt;em&gt;too dense&lt;/em&gt;, neither your memory nor your computing time will get benefits from using sparse matrices.&lt;a href=&#34;#fnref1&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Visualizing Phylogenetic Trees with R and jsPhyloSVG</title>
      <link>https://ggvy.cl/post/visualizing-phylogenetic-trees-with-r-and-jsphylosvg/</link>
      <pubDate>Fri, 08 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>https://ggvy.cl/post/visualizing-phylogenetic-trees-with-r-and-jsphylosvg/</guid>
      <description>&lt;script src=&#34;https://ggvy.cl/rmarkdown-libs/htmlwidgets/htmlwidgets.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;https://ggvy.cl/rmarkdown-libs/jsphylosvg/jsphylosvg-min.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;https://ggvy.cl/rmarkdown-libs/jsphylosvg/raphael-min.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;https://ggvy.cl/rmarkdown-libs/jsphylosvg/yui-min.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;https://ggvy.cl/rmarkdown-libs/jsPhyloSVG-binding/jsPhyloSVG.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;During the last year I’ve been working on a daily basis with &lt;a href=&#34;../publication/aphylo/&#34;&gt;phylogenetic trees&lt;/a&gt;, objects that in graph jargon are called Directed Acyclic Graphs. While R does have some cool packages out there to visualize these–including &lt;a href=&#34;https://zachcp.github.io/phylocanvas/&#34;&gt;phylocanvas&lt;/a&gt; which looks great!–I wanted to tryout &lt;a href=&#34;http://www.jsphylosvg.com&#34;&gt;jsPhyloSVG&lt;/a&gt;, and moreover, to learn how to use &lt;a href=&#34;http://www.htmlwidgets.org&#34;&gt;htmlwidgets&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;So, after a week-long process of playing with JavaScript, of which I had no prior knowledge (so thank you &lt;a href=&#34;https://w3schools.com&#34;&gt;W3shools&lt;/a&gt;)!, and hours of head-scratching, I created this R package, &lt;a href=&#34;https://USCBiostats.github.io/jsPhyloSVG&#34;&gt;jsPhyloSVG&lt;/a&gt; that provides an htmlwidget for the library of the same name. An example follows&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# I&amp;#39;ll be using the ape package to simulate a tree
library(ape)
# You can get it from github USCBiostats/jsPhyloSVG
library(jsPhyloSVG)

# A random phylogenetic tree with 50 tips
tree &amp;lt;- rtree(50)

jsPhyloSVG(write.tree(tree))&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;htmlwidget-1&#34; style=&#34;width:576px;height:480px;&#34; class=&#34;jsPhyloSVG html-widget&#34;&gt;&lt;/div&gt;
&lt;script type=&#34;application/json&#34; data-for=&#34;htmlwidget-1&#34;&gt;{&#34;x&#34;:{&#34;tree&#34;:&#34;((((t43:0.932305844,t31:0.9845660173):0.1447749503,((t36:0.2047534357,(t33:0.5947111531,t30:0.1363537442):0.4523779938):0.7487354644,(t15:0.4477529069,((t7:0.1778784869,t26:0.6665748472):0.9773745697,t40:0.3106660887):0.2765452175):0.03037715843):0.04805329302):0.4547258427,(((t8:0.441354393,t49:0.02917329199):0.6289364961,(((t32:0.5995104022,t37:0.8488309553):0.6598875793,(t24:0.228343871,t46:0.990097211):0.276045535):0.6202068042,t45:0.1444826063):0.8427942758):0.3079548648,t17:0.3514447703):0.08520040149):0.1349591794,((((t44:0.5093783112,t48:0.8294241913):0.0461006409,(((((((t22:0.5195081867,t38:0.4020721868):0.3774028523,t11:0.937823409):0.8035644148,t10:0.2306567996):0.7398158929,t34:0.5381271895):0.7243057585,t6:0.2920015957):0.4826544332,t41:0.8750956142):0.2028468326,((t21:0.1134213735,t2:0.889464349):0.866344922,((t5:0.4883335188,(t27:0.5046961394,(t18:0.3843020839,t9:0.4849177306):0.8046769423):0.3719995969):0.9010140565,t19:0.8208623556):0.03838334465):0.9540978081):0.7979266369):0.4276919626,(t25:0.03141828487,t50:0.3015144009):0.6947834471):0.7647038966,((t13:0.1159334404,((t39:0.03575936123,t4:0.05359950056):0.5595376433,t16:0.2884342759):0.9279359682):0.3650581299,(((t42:0.7499528064,t12:0.2922347388):0.2771610385,((t28:0.1899906085,t14:0.9218426929):0.9448720694,t1:0.6552358426):0.9238845527):0.1547263861,((t29:0.02971262229,t3:0.662239939):0.7393785079,((t35:0.2758810781,(t20:0.3702376105,t23:0.04204657627):0.476135704):0.7810493102,t47:0.3382842308):0.3418468167):0.0841111003):0.1162081454):0.8675771332):0.6727451095);&#34;,&#34;layout&#34;:&#34;circular&#34;},&#34;evals&#34;:[],&#34;jsHooks&#34;:[]}&lt;/script&gt;
&lt;p&gt;You can take a look at the project repo &lt;a href=&#34;https://github.com/USCBiostats/jsPhyloSVG&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Read viz attributes from GEXF files</title>
      <link>https://ggvy.cl/post/read-viz-attributes-from-gexf-files/</link>
      <pubDate>Mon, 27 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>https://ggvy.cl/post/read-viz-attributes-from-gexf-files/</guid>
      <description>&lt;p&gt;So one of the new features that I’ve working on is processing viz attributes. In the &lt;a href=&#34;https://cran.r-project.org/package=rgexf&#34;&gt;CRAN version of rgexf&lt;/a&gt;, the function &lt;code&gt;read.gexf&lt;/code&gt; only reads in non-visual attributes and the graph structure itself, which is no longer true &lt;a href=&#34;https://github.com/gvegayon/rgexf/commit/39d24409c7c641a1e62bdf518ff8ca46ea6172b5&#34;&gt;as of today&lt;/a&gt; (at least for the static viz attributes, all the other dynamic features supported by GEXF will come in the future).&lt;/p&gt;
&lt;p&gt;We start by loading the R packages and reading the “lesmiserables.gexf” file that is included in &lt;code&gt;rgexf&lt;/code&gt;. We use the &lt;code&gt;gexf.to.igraph&lt;/code&gt; function to coerce the &lt;code&gt;gexf&lt;/code&gt; object to an object of class &lt;code&gt;igraph&lt;/code&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Loading R packages
library(rgexf)
library(igraph)

# Reading and coercing into an igraph object
fn      &amp;lt;- system.file(&amp;quot;gexf-graphs&amp;quot;, &amp;quot;lesmiserables.gexf&amp;quot;, package=&amp;quot;rgexf&amp;quot;)
gexf1   &amp;lt;- read.gexf(fn)
igraph1 &amp;lt;- gexf.to.igraph(gexf1)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here comes the nice new feature. &lt;code&gt;read.gexf&lt;/code&gt; and &lt;code&gt;gexf.to.igraph&lt;/code&gt; take into account the visual attributes of the network, and we can use those with &lt;code&gt;plot.igraph&lt;/code&gt; directly without us specifying them! The only changes that I do in the next code chunk are rescaling the vertex and labels sizes (igraph automatically changes scales, which messes a bit with what we read from the GEXF object), and setting the edges to be curved and labels to be black using the &lt;code&gt;sans&lt;/code&gt; font family, and this is what we get&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# We set the mai = c(0,0,0,0) so we have more space for our plot
oldpar &amp;lt;- par(no.readonly = TRUE)
par(mai = rep(0,4))
plot(igraph1,
     vertex.size        = V(igraph1)$size/2,
     vertex.label.cex   = V(igraph1)$size/50,
     vertex.label.color = &amp;quot;black&amp;quot;,
     edge.curved        = TRUE,
     vertex.label.family = &amp;quot;sans&amp;quot;
     )&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://ggvy.cl/post/2017-11-27-read-viz-attributes-from-gexf-files_files/figure-html/igraph-plot-1.svg&#34; width=&#34;576&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;par(oldpar)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And to make sure we are getting the same output, we can take a look at how the &lt;code&gt;plot.gexf&lt;/code&gt; function draws our GEXF graph.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;plot(
  gexf1,
  copy.only = TRUE,
  dir       = &amp;quot;../../static/post/read-viz-attributes-from-gexf-files/viz&amp;quot;
  )&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## GEXF graph successfully written at:
## /home/vegayon/Documents/website/static/post/read-viz-attributes-from-gexf-files/viz/network.gexf&lt;/code&gt;&lt;/pre&gt;
&lt;iframe width=&#34;100%&#34; height=&#34;400&#34; src=&#34;viz/index.html&#34;&gt;
&lt;/iframe&gt;
&lt;p&gt;As expected, the same result.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Some notes on my first shiny app</title>
      <link>https://ggvy.cl/post/some-notes-on-my-first-shiny-app/</link>
      <pubDate>Thu, 16 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>https://ggvy.cl/post/some-notes-on-my-first-shiny-app/</guid>
      <description>&lt;p&gt;Since there are plenty of examples out there telling you how to get started with shiny (like &lt;a href=&#34;https://shiny.rstudio.com/tutorial/&#34; target=&#34;_blank&#34;&gt;Rstudio&amp;rsquo;s&lt;/a&gt;, or &lt;a href=&#34;https://www.google.com/search?newwindow=1&amp;amp;ei=Og8OWpG4CYOUjwO9tZzABw&amp;amp;q=shiny+tutorial&amp;amp;oq=shiny+tutorial&amp;amp;gs_l=psy-ab.3..0i71k1l4.0.0.0.38217.0.0.0.0.0.0.0.0..0.0....0...1..64.psy-ab..0.0.0....0.v793tYPbUcw&#34; target=&#34;_blank&#34;&gt;Google&lt;/a&gt;), I will focus on telling some of the stuff that I did learned and may not be obvious at first, including some of the mistakes I made.&lt;/p&gt;

&lt;p&gt;Before start, I just want to stress that I&amp;rsquo;m writing this after my first shiny app, you&amp;rsquo;ve been warned! Here it goes:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Use the &amp;ldquo;two-file&amp;rdquo; method&lt;/strong&gt; Instead of putting everything, UI and Server, in a single &lt;code&gt;app.R&lt;/code&gt; file, create two separate files &lt;code&gt;server.R&lt;/code&gt; and &lt;code&gt;ui.R&lt;/code&gt; (see &lt;a href=&#34;http://shiny.rstudio.com/articles/two-file.html&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;). This is not hard to figure out, but is not the first thing that you see when you create a shiny app from Rstudio. The reason why is very simple, as your project grows, you want to have it organized using several Rscripts rather than a single big R file that&amp;rsquo;s called &lt;code&gt;app.R&lt;/code&gt;. That&amp;rsquo;s OK but not very friendly to maintain. This takes us to the next point.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Use separate R files for more complex functions&lt;/strong&gt; If you have other functions that you would like to run with your app, either use the &lt;code&gt;global.R&lt;/code&gt; script, which will be run automatically, or just source your file like &lt;code&gt;source(&amp;quot;extra-functions.R&amp;quot;)&lt;/code&gt; (see &lt;a href=&#34;https://shiny.rstudio.com/articles/modules.html&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;). Again, this makes code maintenance easier.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Make sure all the packages that you need are installed&lt;/strong&gt; You can either keep the source version of such packages as a sub directory, or follow a more simple approach such as using &lt;code&gt;require&lt;/code&gt;, e.g.:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;if (!require(somepackage)) {
  install.packages(&amp;quot;somepackage&amp;quot;)
  library(somepackage)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is especially important when deploying shiny in a in-house server as the &amp;ldquo;shiny user&amp;rdquo; has to have access to those R packages. You can always try to install them globally too so that all users in the server have access to the required packages.&lt;/p&gt;

&lt;p&gt;More important, &lt;font color=&#34;red&#34;&gt;&lt;b&gt;make sure that you have &lt;code&gt;shiny&lt;/code&gt; and &lt;code&gt;rmarkdown&lt;/code&gt; installed and available system-wide!&lt;/b&gt;&lt;/font&gt; I spent roughly half an hour figuring out why my shiny apps didn&amp;rsquo;t started once I started the server in our machine.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Nested apps&lt;/strong&gt; If you want to include several apps under the same folder in your &lt;code&gt;/srv/shiny-server&lt;/code&gt; folder (which is where the shiny apps live), e.g. &lt;code&gt;my-apps&lt;/code&gt;, avoid including &lt;code&gt;R&lt;/code&gt; or &lt;code&gt;Rmd&lt;/code&gt; files in that folder, shiny will try to run those as shiny apps and, for some reason that I&amp;rsquo;m not aware of, links that go from html pages in that folder to your sub directory apps will not work.&lt;/p&gt;

&lt;p&gt;For example, suppose that we have two apps, &lt;code&gt;shinyApp1&lt;/code&gt; and &lt;code&gt;shinyApp2&lt;/code&gt; and we want to keep those in the same folder &lt;code&gt;your-site&lt;/code&gt;, and you have a nice front-end website allowing you to access to such apps with relative links in the form of &lt;code&gt;&amp;lt;a href=&amp;quot;shinyApp1&amp;quot;&amp;gt;Go to shinyApp1&amp;lt;/a&amp;gt;&lt;/code&gt;, you&amp;rsquo;ll just need to &lt;strong&gt;include the &lt;code&gt;index.html&lt;/code&gt;&lt;/strong&gt; of your website (which you can create with &lt;code&gt;rmarkdown&lt;/code&gt;). The &lt;strong&gt;following would be wrong&lt;/strong&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;+---/srv/shiny-server
|   +---/you-site
|       +---index.html
|       +---index.Rmd    # THIS SHOULDN&#39;T BE HERE!
|       +---shinyApp1
|           +---server.R
|           +---ui.R
|       +---shinyApp2
|           +---server.R
|           +---ui.R
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This would result in having a broken link in your &lt;code&gt;index.html&lt;/code&gt; file. You should do this instead, remove the Rmd file from the &lt;code&gt;your-site&lt;/code&gt; folder:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;+---/srv/shiny-server
|   +---/you-site
|       +---index.html
|       +---shinyApp1
|           +---server.R
|           +---ui.R
|       +---shinyApp2
|           +---server.R
|           +---ui.R
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This example was adapted from &lt;a href=&#34;http://docs.rstudio.com/shiny-server/#host-a-directory-of-applications&#34; target=&#34;_blank&#34;&gt;Section 2.7.1&lt;/a&gt; from the Shiny&amp;rsquo;s Admin guide.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Read about Reactivity&lt;/strong&gt; This is a fundamental thing to understand in Shiny, moreover, the key function to review is &lt;code&gt;reactive&lt;/code&gt;, which allows you to create intermediate points (reactive conductors) between your input and output data in the shiny app. Just to give you an idea, here is an (adapted) example that I find useful from the &lt;a href=&#34;http://shiny.rstudio.com/articles/#reactivity&#34; target=&#34;_blank&#34;&gt;shiny documentation&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;This will work&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# A function that will be called from within the server
fib &amp;lt;- function(n) ifelse(n&amp;lt;3, 1, fib(n-1)+fib(n-2))
    
server &amp;lt;- function(input, output) {
      
  # Calling your fancy fib function, notice the
  #
  #     reactive({ ... })
  #
  # wrapper.
  currentFib         &amp;lt;- reactive({ fib(as.numeric(input$n)) })
    
  # You use it as a function later on.
  output$nthValue    &amp;lt;- renderText({ currentFib() })
  output$nthValueInv &amp;lt;- renderText({ 1 / currentFib() })
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This won&amp;rsquo;t work, since currentFib is not in the &amp;ldquo;reactive&amp;rdquo; world!&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;server &amp;lt;- function(input, output) {
  # Will give error
  currentFib      &amp;lt;- fib(as.numeric(input$n))
  output$nthValue &amp;lt;- renderText({ currentFib })
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;For my next steps, I expect to be able to include a shiny app in the R packages &lt;code&gt;aphylo&lt;/code&gt; (which is not on CRAN yet, but available &lt;a href=&#34;https://github.com/USCBiostats/aphylo&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;) and &lt;code&gt;rgexf&lt;/code&gt; (which it is on &lt;a href=&#34;https://cran.r-project.org/package=rgexf&#34; target=&#34;_blank&#34;&gt;CRAN&lt;/a&gt;, but is currently on a major update &lt;a href=&#34;https://github.com/gvegayon/rgexf&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;I recommend taking a look at &lt;a href=&#34;https://bookdown.org/yihui/bookdown/web-pages-and-shiny-apps.html&#34; target=&#34;_blank&#34;&gt;this section&lt;/a&gt; from the &lt;a href=&#34;https://bookdown.org/yihui/bookdown&#34; target=&#34;_blank&#34;&gt;bookdown&lt;/a&gt; that talks about how to include shiny apps within web pages.&lt;/p&gt;

&lt;p&gt;Finally, if you are interested, you can take a look at the shiny app &lt;a href=&#34;https://gvegayon.shinyapps.io/predq/&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt; and at the code &lt;a href=&#34;https://github.com/gvegayon/predq&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>New versions of ABCoptim and googlePublicData on CRAN</title>
      <link>https://ggvy.cl/post/new-versions-of-abcoptim-and-googlepublicdata-on-cran/</link>
      <pubDate>Wed, 08 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>https://ggvy.cl/post/new-versions-of-abcoptim-and-googlepublicdata-on-cran/</guid>
      <description>&lt;p&gt;Finally, after a long wait, the R packages &lt;a href=&#34;https://github.com/gvegayon/googlePublicData&#34;&gt;googlePublicData&lt;/a&gt; (more than 2 years since the last update!) and &lt;a href=&#34;https://github.com/gvegayon/ABCoptim&#34;&gt;ABCoptim&lt;/a&gt; (roughly a year since the last update) have new versions on &lt;a href=&#34;https://cran.r-project.org&#34;&gt;CRAN&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The first just got an update that fixed some nasty bugs that were evident once you upload the data to &lt;a href=&#34;https://www.google.com/publicdata&#34;&gt;Google Public Data Explorer&lt;/a&gt;, and some other new internal stuff making the code nicer and easier to maintain. The later also got some small updates, a couple of new parameters matching &lt;code&gt;optim&lt;/code&gt;, and new methods for printing and plotting the results.&lt;/p&gt;
&lt;p&gt;Here is an example of &lt;code&gt;ABCoptim&lt;/code&gt; (from the manual)&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Loading the package
library(ABCoptim)

# This function has a minimum at (pi,pi)
fun &amp;lt;- function(x) {
  -cos(x[1])*cos(x[2])*exp(-((x[1] - pi)^2 + (x[2] - pi)^2))
}

# Calling the function!
abc_optim(rep(0,2), fun, lb=-10, ub=10, criter=50)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
##  An object of class -abc_answer- (Artificial Bee Colony Optim.):
##  par:
##     x[1]:  3.141593
##     x[2]:  3.141593
## 
##  value:
##           -1.000000
## 
##  counts:
##            181&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And here an example of what can you get with &lt;code&gt;googlePublicData&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;
&lt;iframe width=&#34;400&#34; height=&#34;325&#34; frameborder=&#34;0&#34; scrolling=&#34;no&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; src=&#34;http://www.google.com/publicdata/embed?ds=lt98u9rd734rn_&amp;amp;ctype=b&amp;amp;strail=true&amp;amp;bcs=d&amp;amp;nselm=s&amp;amp;met_y=porc_pob_pobre&amp;amp;scale_y=lin&amp;amp;ind_y=false&amp;amp;met_x=prom_de_escolaridad&amp;amp;scale_x=lin&amp;amp;ind_x=false&amp;amp;met_s=porc_hogares_con_computador&amp;amp;scale_s=lin&amp;amp;ind_s=false&amp;amp;idim=region:IX:RM:XII:VIII:VI:VII:X:V&amp;amp;ifdim=region&amp;amp;hl=en_US&amp;amp;dl=en&amp;amp;ind=false&amp;amp;icfg=lt98u9rd734rn_%253A51%253Aregion%26%26IX:::2009%7Clt98u9rd734rn_%253A51%253Aregion%26%26RM:::2009%7Clt98u9rd734rn_%253A51%253Aregion%26%26XII:::2009%7Clt98u9rd734rn_%253A51%253Aregion%26%26VIII:::2009%7Clt98u9rd734rn_%253A51%253Aregion%26%26VI:::2009%7Clt98u9rd734rn_%253A51%253Aregion%26%26VII:::2009%7Clt98u9rd734rn_%253A51%253Aregion%26%26X:::2009%7Clt98u9rd734rn_%253A51%253Aregion%26%26V:::2009&amp;amp;iconSize=0.5&#34;&gt;
&lt;/iframe&gt;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Reboot of rgexf</title>
      <link>https://ggvy.cl/post/reboot-of-rgexf/</link>
      <pubDate>Wed, 08 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>https://ggvy.cl/post/reboot-of-rgexf/</guid>
      <description>&lt;p&gt;The &lt;a href=&#34;https://github.com/gvegayon/rgexf&#34;&gt;rgexf&lt;/a&gt; R package has been around a couple of years now, but without much going on on CRAN (my bad!). In this post I’ll show how to use the new version (on development and soon the be shipped to &lt;a href=&#34;https://cran.r-project.org/package=rgexf&#34;&gt;CRAN&lt;/a&gt;) together with the &lt;a href=&#34;https://github.com/USCCANA/netdiffuseR&#34;&gt;netdiffuseR&lt;/a&gt; R package to visualize a random diffusion process.&lt;/p&gt;
&lt;p&gt;First, we load all the packages that we will be using&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Loading the relevant packages
library(igraph, quietly = TRUE)
library(rgexf, quietly = TRUE)
library(netdiffuseR, quietly = TRUE)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next, we simulate a random diffusion network, in this case, a small-world network with 200 nodes spanning 20 time periods.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# A random diffusion network
set.seed(122)
net &amp;lt;- rdiffnet(n = 200, t=20, seed.graph = &amp;quot;small-world&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, we get the parameters ready, in this case, position using the function &lt;code&gt;layout_nicely&lt;/code&gt; from the igraph package, and colors using the Time of Adoption (toa)&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Setting viz attributes
pos &amp;lt;- cbind(layout_nicely(diffnet_to_igraph(net)[[1]]), 0)

# Coloring according to time of adoption. White ones are not
# adopters.
col &amp;lt;- diffnet.toa(net)
col &amp;lt;- col/20
col &amp;lt;- colorRamp(blues9, alpha = TRUE)(col)
col[is.na(col[,1]),1:3] &amp;lt;- 255
col[,4] &amp;lt;- .5&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Finally, we create the GEXF object and call the plot function. In this case we are using &lt;a href=&#34;https://github.com/raphv/gexf-js&#34;&gt;gexf-js&lt;/a&gt; (sigma-js will return in the future). Also, notice that we are only copying the files; the default behavior is to copy the files by setting &lt;code&gt;copy.only = TRUE&lt;/code&gt; and start the server using the &lt;a href=&#34;https://cran.r-project.org/package=servr&#34;&gt;servr&lt;/a&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Creating the gexf object
gf &amp;lt;- igraph.to.gexf(
  diffnet_to_igraph(net)[[1]],
  nodesVizAtt = list(
    color    = col,
    position = pos
    )
  )

# Plotting using gexf-js
plot(
  gf,
  edgeWidthFactor = .1,
  copy.only = TRUE,
  dir       = &amp;quot;../../static/post/reboot-of-rgexf/viz&amp;quot;
  )&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## GEXF graph successfully written at:
## /home/vegayon/Documents/website/static/post/reboot-of-rgexf/viz/network.gexf&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can take a look at resulting website &lt;a href=&#34;viz&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;div id=&#34;session-info&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Session info&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;devtools::session_info()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## ─ Session info ──────────────────────────────────────────────────────────
##  setting  value                       
##  version  R version 3.4.3 (2017-11-30)
##  os       Ubuntu 16.04.3 LTS          
##  system   x86_64, linux-gnu           
##  ui       X11                         
##  language en_US                       
##  collate  en_US.UTF-8                 
##  tz       US/Pacific                  
##  date     2018-01-17                  
## 
## ─ Packages ──────────────────────────────────────────────────────────────
##  package        * version     date      
##  assertthat       0.2.0       2017-04-11
##  backports        1.1.2       2017-12-13
##  blogdown         0.4.4       2018-01-17
##  bookdown         0.5         2017-08-20
##  boot             1.3-20      2017-07-30
##  cli              1.0.0       2017-11-10
##  clisymbols       1.2.0       2017-05-21
##  codetools        0.2-15      2016-10-05
##  crayon           1.3.4       2017-09-16
##  desc             1.1.1       2017-08-03
##  devtools         1.13.3.9000 2018-01-11
##  digest           0.6.14      2018-01-14
##  evaluate         0.10.1      2017-06-24
##  htmltools        0.3.6       2017-04-28
##  httpuv           1.3.5       2017-07-04
##  igraph         * 1.1.2       2017-07-21
##  knitr            1.18        2017-12-27
##  lattice          0.20-35     2017-03-25
##  magrittr         1.5         2014-11-22
##  MASS             7.3-48      2017-12-24
##  MatchIt          3.0.1       2017-04-18
##  Matrix           1.2-11      2017-08-16
##  memoise          1.1.0       2017-04-21
##  netdiffuseR    * 1.18.2999   2017-09-27
##  network          1.13.0      2015-09-19
##  networkDynamic   0.9.0       2016-01-15
##  pkgbuild         0.0.0.9000  2018-01-11
##  pkgconfig        2.0.1       2017-03-21
##  pkgload          0.0.0.9000  2017-11-10
##  R6               2.2.2       2017-06-17
##  Rcpp             0.12.14     2017-11-23
##  rgexf          * 0.16.0      2018-01-02
##  rlang            0.1.6       2017-12-21
##  rmarkdown        1.8         2017-11-17
##  rprojroot        1.3-2       2018-01-03
##  servr            0.8         2017-11-06
##  sessioninfo      1.0.1.9000  2017-11-10
##  sna              2.4         2016-08-08
##  SparseM          1.77        2017-04-23
##  statnet.common   4.0.0       2017-08-16
##  stringi          1.1.6       2017-11-17
##  stringr          1.2.0       2017-02-18
##  testthat         2.0.0.9000  2018-01-11
##  usethis          1.1.0.9000  2018-01-11
##  withr            2.1.1       2017-12-19
##  XML              3.98-1.9    2017-06-19
##  yaml             2.1.16      2017-12-12
##  source                              
##  CRAN (R 3.4.0)                      
##  CRAN (R 3.4.2)                      
##  Github (rstudio/blogdown@8ed8bc1)   
##  CRAN (R 3.4.1)                      
##  CRAN (R 3.4.1)                      
##  Github (r-lib/cli@ab1c3aa)          
##  CRAN (R 3.4.1)                      
##  CRAN (R 3.3.1)                      
##  CRAN (R 3.4.1)                      
##  CRAN (R 3.4.1)                      
##  Github (hadley/devtools@0bcfd6e)    
##  CRAN (R 3.4.3)                      
##  CRAN (R 3.4.1)                      
##  CRAN (R 3.4.0)                      
##  CRAN (R 3.4.1)                      
##  CRAN (R 3.4.1)                      
##  CRAN (R 3.4.3)                      
##  CRAN (R 3.3.3)                      
##  CRAN (R 3.3.2)                      
##  CRAN (R 3.4.3)                      
##  CRAN (R 3.4.0)                      
##  CRAN (R 3.4.1)                      
##  CRAN (R 3.4.0)                      
##  Github (USCCANA/netdiffuseR@92b4bff)
##  CRAN (R 3.3.2)                      
##  CRAN (R 3.4.1)                      
##  Github (r-lib/pkgbuild@ce7f6d1)     
##  CRAN (R 3.4.1)                      
##  Github (r-lib/pkgload@70eaef8)      
##  CRAN (R 3.4.1)                      
##  CRAN (R 3.4.2)                      
##  local                               
##  CRAN (R 3.4.3)                      
##  CRAN (R 3.4.2)                      
##  CRAN (R 3.4.3)                      
##  CRAN (R 3.4.2)                      
##  Github (r-lib/sessioninfo@c871d01)  
##  CRAN (R 3.3.2)                      
##  CRAN (R 3.4.0)                      
##  CRAN (R 3.4.1)                      
##  CRAN (R 3.4.2)                      
##  CRAN (R 3.4.0)                      
##  Github (hadley/testthat@2ca7ac9)    
##  Github (r-lib/usethis@390e05b)      
##  CRAN (R 3.4.3)                      
##  CRAN (R 3.4.1)                      
##  CRAN (R 3.4.2)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;last-updated&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Last updated&lt;/h2&gt;
&lt;p&gt;This post was last updated on 2017-11-13 to reflect a small change in &lt;code&gt;rgexf&lt;/code&gt; that makes it easier to process colors and positions.&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Environments in R Rock</title>
      <link>https://ggvy.cl/post/environments-in-r-rock/</link>
      <pubDate>Mon, 02 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>https://ggvy.cl/post/environments-in-r-rock/</guid>
      <description>&lt;p&gt;Last week I found myself working on &lt;a href=&#34;https://github.com/USCCANA/netdiffuseR&#34; target=&#34;_blank&#34;&gt;netdiffuseR&lt;/a&gt; trying to establish nice defaults for some plotting functions with the following goals:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;p&gt;Make the code easy to maintain: So if I need to change defaults I just change a few lines and that works for all plot functions,&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Make the code easy to see in the manual (help) file: So is easier to the user to focus on the main features of a plot rather than looking at a large description of a function with lots of parameters and lots of defaults, and&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Make the code hopefully efficient: Not that I care that much, but if I’m going to be passing arguments across functions, it better be efficient!&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;So, long story short, I came up with the following approach:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;p&gt;Create a list of defaults included in the package: This is actually something that I’ve already seen in some other places, like for example &lt;a href=&#34;https://github.com/igraph/rigraph/blob/665d71ebd40cdfe9b996a4f50c35d65b791e4102/R/par.R&#34; target=&#34;_blank&#34;&gt;igraph&lt;/a&gt;, they have a couple of environments that set plotting defaults.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Make a heavy use of the ellipsis! &lt;code&gt;...&lt;/code&gt; So I can actually grab whatever the user passed through it, and later modify the arguments (I’ll show this in an example)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Use 1. to modify 2. at will… with environments!&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;While I’m not sure this is the most efficient way of doing this (and I’m pretty sure that I’m not the first person to do something like this), it works for what I’m doing right now. The following piece of code illustrates how this works.&lt;/p&gt;
&lt;p&gt;This is a list of the defaults that we would like all the functions to have:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# This list holds the default parameters
defaults &amp;lt;- list(color=&amp;quot;steelblue&amp;quot;, add=FALSE)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This function is the one that sets the defaults, follow the comments to see how it works:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# This function sets the defaults giving the name of an object that holds the
# parameters... or at least should hold them!
set.defaults &amp;lt;- function(obj_name) {
  
  # Where was this function called from? This way we get
  # the parent frame (the environment from where the function was called)
  # this actually holds all the elements, but works as a reference, so no copy!
  env &amp;lt;- parent.frame()
  
  # Now we loop throught the defaults that I&amp;#39;ve specified
  # in -defaults-
  for (d in names(defaults))
    # If -d- hasn&amp;#39;t been specified, then set it!
    if (!length(env[[obj_name]][[d]]))
      env[[obj_name]][[d]] &amp;lt;- defaults[[d]]
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is a function that illustrates how everything works together. So we can pass extra arguments with the ellipsis, we store them in a list called &lt;code&gt;dots&lt;/code&gt; (I’m sure there must be a more efficient way of doing this, but it’s OK for now :]), sets the defaults calling &lt;code&gt;set.defaults&lt;/code&gt;, and returns the &lt;code&gt;dots&lt;/code&gt; list:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;f &amp;lt;- function(...) {
  
  # Getting the dots
  dots &amp;lt;- list(...)
  
  # Setting defaults
  set.defaults(&amp;quot;dots&amp;quot;)
  
  # Did we got them?
  return(dots)
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now let’s see if it works!&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;f()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## $color
## [1] &amp;quot;steelblue&amp;quot;
## 
## $add
## [1] FALSE&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;f(color=&amp;quot;green&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## $color
## [1] &amp;quot;green&amp;quot;
## 
## $add
## [1] FALSE&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As expected, the first call of the function returns the default parameters. In the second call, since I specified &lt;code&gt;&amp;quot;green&amp;quot;&lt;/code&gt;, the function &lt;code&gt;set.defaults&lt;/code&gt; only set the argument &lt;code&gt;add&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;You can read more about environments in &lt;a href=&#34;http://adv-r.had.co.nz/Environments.html&#34; target=&#34;_blank&#34;&gt;Hadley Wickham’s Advance R&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Yet another plot of R&#39;s colors()</title>
      <link>https://ggvy.cl/post/yet-another-plot-of-r-s-colors/</link>
      <pubDate>Fri, 15 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://ggvy.cl/post/yet-another-plot-of-r-s-colors/</guid>
      <description>&lt;p&gt;I know there are plenty of these online, but I just thought about having my own for quick reference…&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ncols &amp;lt;- ceiling(sqrt(length(colors())))^2
dat &amp;lt;- matrix(1:ncols, sqrt(ncols))
image(dat, col = colors()[1:ncols])
pos &amp;lt;- seq(0, 1, length.out = sqrt(ncols))
pos &amp;lt;- lapply(pos, function(x) cbind(x, pos))
pos &amp;lt;- do.call(rbind, pos)

ncols &amp;lt;- length(colors())
text(x=pos[1:ncols,2], y=pos[1:ncols,1], labels = 1:ncols, cex=.75, srt=60)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://ggvy.cl/post/2017-09-15-yet-another-plot-of-r-s-colors_files/figure-html/fancy-colors-1.svg&#34; width=&#34;768&#34; height=&#34;800px&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Setting up optional OpenMP support with RcppArmadillo</title>
      <link>https://ggvy.cl/post/setting-up-optional-openmp-support-with-rcpparmadillo/</link>
      <pubDate>Tue, 29 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://ggvy.cl/post/setting-up-optional-openmp-support-with-rcpparmadillo/</guid>
      <description>

&lt;p&gt;Setting up an R package that supports OpenMP can be a bit awkward. While systems like Ubuntu with g++ have straight forward support for &lt;code&gt;-fopenmp&lt;/code&gt; flags, the same may not be true un MacOS&amp;rsquo;s &lt;code&gt;clang&lt;/code&gt;, since the latter is not shipped with it.&lt;/p&gt;

&lt;p&gt;In order to solve this, it is necesary to have different &lt;code&gt;src/Makevars&lt;/code&gt; file depending on whether the compiler supports OpenMP or not. This can be solved using a &lt;code&gt;configure&lt;/code&gt; file, more over, &lt;code&gt;autoconf&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.gnu.org/software/autoconf/autoconf.html&#34; target=&#34;_blank&#34;&gt;Autoconf&lt;/a&gt; is &amp;ldquo;an extensible package of M4 macros that produce shell scripts to automatically configure software source code packages&amp;rdquo;. Among the (cool) things that we can use it for is creating tailored &lt;code&gt;src/Makevars&lt;/code&gt; files (and furthermore, any other files&amp;hellip; even R/*.r source code can be modified with this, just take a look at &lt;a href=&#34;https://cran.r-project.org/doc/manuals/r-devel/R-exts.html#Configure-and-cleanup&#34; target=&#34;_blank&#34;&gt;Writing R Extensions&lt;/a&gt;). The workflow of &lt;code&gt;R CMD&lt;/code&gt;+autoconf follows:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;The &lt;code&gt;configure&lt;/code&gt; file is executed and performs the requested checks (like having OpenMP) and modifies/creates the configuration files that will be used to compile the package, like &lt;code&gt;src/Makevars&lt;/code&gt;, &lt;code&gt;src/makefile&lt;/code&gt;, etc. Furthermore, it can use &amp;ldquo;templates&amp;rdquo; to create such files, which have the suffix &lt;code&gt;.in&lt;/code&gt;, for example, &lt;code&gt;src/Makevars.in&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;R CMD&lt;/code&gt; will compile the package using all the inputs (&lt;code&gt;src/Makevars&lt;/code&gt;, &lt;code&gt;src/makefile&lt;/code&gt;) that were created, and&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;In the case of &lt;code&gt;R CMD build&lt;/code&gt;, &lt;code&gt;R CMD&lt;/code&gt; will call &lt;code&gt;cleanup&lt;/code&gt; (they require you to do so) to remove the &lt;code&gt;config.*&lt;/code&gt; files and &lt;code&gt;src/Makevars&lt;/code&gt; so these are not shipped with the package file.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The next section describes the files that you need to include in your project to set it up using &lt;code&gt;RcppArmadillo&lt;/code&gt; with OpenMP support depending on whether it is available with the compiler. This example is from the R package &lt;a href=&#34;https://github.com/USCCANA/netdiffuseR&#34; target=&#34;_blank&#34;&gt;netdiffuseR&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&#34;configuration-files&#34;&gt;Configuration Files&lt;/h1&gt;

&lt;p&gt;In order to use &lt;code&gt;autoconf&lt;/code&gt; to optionally include OpenMP with your R package, you need to have the following files in your system:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Need a &lt;code&gt;configure.ac&lt;/code&gt; file. This is what &lt;code&gt;autoconf&lt;/code&gt; uses as input.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#                                               -*- Autoconf -*-
# netdiffuseR configure.ac
# (with some code borrowed from RcppArmadillo configure.ac
# and ARTP2 configure.ac)
# 
# Process this file with autoconf to produce a configure script.

AC_PREREQ([2.69])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This line can be replaced by whatever the name of your package is (here is netdiffuseR)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;AC_INIT(netdiffuseR, m4_esyscmd_s([awk &#39;/^Version:/ {print $2}&#39; DESCRIPTION]))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;These couple of lines set up the path to R.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Set R_HOME, respecting an environment variable if one is set 
: ${R_HOME=$(R RHOME)}
if test -z &amp;quot;${R_HOME}&amp;quot;; then
    AC_MSG_ERROR([Could not determine R_HOME.])   
fi
# Use R to set CXX and CXXFLAGS
CXX=$(${R_HOME}/bin/R CMD config CXX)
CXXFLAGS=$(&amp;quot;${R_HOME}/bin/R&amp;quot; CMD config CXXFLAGS)

# We are using C++
AC_LANG(C++)
AC_REQUIRE_CPP
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This are the lines that actually do the job on setting OpenMP. I copied this from the ARTP2 R Package.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;dnl this the meat of R&#39;s m4/openmp.m4
  OPENMP_[]_AC_LANG_PREFIX[]FLAGS=
  AC_ARG_ENABLE([openmp],
    [AS_HELP_STRING([--disable-openmp], [do not use OpenMP])])
  if test &amp;quot;$enable_openmp&amp;quot; != no; then
    AC_CACHE_CHECK([for $[]_AC_CC[] option to support OpenMP],
      [ac_cv_prog_[]_AC_LANG_ABBREV[]_openmp],
      [AC_LINK_IFELSE([_AC_LANG_OPENMP],
     [ac_cv_prog_[]_AC_LANG_ABBREV[]_openmp=&#39;none needed&#39;],
     [ac_cv_prog_[]_AC_LANG_ABBREV[]_openmp=&#39;unsupported&#39;
      for ac_option in -fopenmp -xopenmp -qopenmp \
                           -openmp -mp -omp -qsmp=omp -homp \
               -fopenmp=libomp \
                           -Popenmp --openmp; do
        ac_save_[]_AC_LANG_PREFIX[]FLAGS=$[]_AC_LANG_PREFIX[]FLAGS
        _AC_LANG_PREFIX[]FLAGS=&amp;quot;$[]_AC_LANG_PREFIX[]FLAGS $ac_option&amp;quot;
        AC_LINK_IFELSE([_AC_LANG_OPENMP],
          [ac_cv_prog_[]_AC_LANG_ABBREV[]_openmp=$ac_option])
        _AC_LANG_PREFIX[]FLAGS=$ac_save_[]_AC_LANG_PREFIX[]FLAGS
        if test &amp;quot;$ac_cv_prog_[]_AC_LANG_ABBREV[]_openmp&amp;quot; != unsupported; then
          break
        fi
      done])])
    case $ac_cv_prog_[]_AC_LANG_ABBREV[]_openmp in #(
      &amp;quot;none needed&amp;quot; | unsupported)
    ;; #(
      *)
    OPENMP_[]_AC_LANG_PREFIX[]FLAGS=$ac_cv_prog_[]_AC_LANG_ABBREV[]_openmp ;;
    esac
  fi

AC_SUBST(OPENMP_CXXFLAGS)
AC_CONFIG_FILES([src/Makevars])
AC_OUTPUT
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;A &lt;code&gt;src/Makevars.in&lt;/code&gt; file which will be modified by configure. The most important part here is the &lt;code&gt;@OPENMP_CXXFLAGS@&lt;/code&gt; tag, which will be replaced accordingly:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;PKG_LIBS = $(LAPACK_LIBS) $(BLAS_LIBS) $(FLIBS) @OPENMP_CXXFLAGS@
# 1.2.4 Using C++11 code
CXX_STD = CXX11

# Besides of the -fopenmp flag, here I&#39;m telling armadillo to use
# 64BIT_WORD which removes the matrix size limit constraint.
PKG_CXXFLAGS=@OPENMP_CXXFLAGS@ -DARMA_64BIT_WORD
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;A &lt;code&gt;cleanup&lt;/code&gt; file (with execution permissions) that &lt;code&gt;R CMD build&lt;/code&gt; will call after building the package. Again, this is a requirement.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!/bin/sh
rm -f config.* src/Makevars
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Once you have all these files in order, you have to run &lt;code&gt;autoconf&lt;/code&gt; so that the &lt;code&gt;configure&lt;/code&gt; file is created, i.e.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ autoconf
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you happen to use travis.yml, you need to specify a more modern distribution so that RcppArmadillo can built with a more modern compiler. In order to do so, put the &lt;code&gt;dist: trusty&lt;/code&gt; option in the yml file. Here is an example travis file from netdiffuseR:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;dist: trusty
language: r
sudo: required

r:
  - release
  - devel # Not working
  - oldrel

os:
  - linux
  - osx

osx_image: xcode7.3

env:
 global:
   - CRAN: http://cran.rstudio.com

r_packages:
  - ape
  - covr
  - testthat
  - knitr
  - rmarkdown
  - RSiena
  - igraph
  - survival

after_success:
  - if [ $TRAVIS_OS_NAME == &amp;quot;linux&amp;quot; ]; then Rscript -e &#39;covr::codecov()&#39;; fi

after_failure:
  - ./run.sh dump_logs

notifications:
  email:
    on_success: change
    on_failure: change
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally, you&amp;rsquo;ll need to add/keep the following files to your repository: &lt;code&gt;configure&lt;/code&gt;, &lt;code&gt;configure.ac&lt;/code&gt;, &lt;code&gt;src/Makevars.in&lt;/code&gt;, &lt;code&gt;src/Makevars.win&lt;/code&gt;, and &lt;code&gt;cleanup&lt;/code&gt;. Otherwise you&amp;rsquo;ll find yourself scratching your head and asking why is travis failing&amp;hellip; belive me.&lt;/p&gt;

&lt;h1 id=&#34;see-also&#34;&gt;See also&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The RcppArmadillo &lt;a href=&#34;https://github.com/RcppCore/RcppArmadillo/blob/dcc8d474446aacabbb13813ee7da4636eeeee450/configure.ac&#34; target=&#34;_blank&#34;&gt;configure.ac&lt;/a&gt; file&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;The netdiffuseR &lt;a href=&#34;https://github.com/USCCANA/netdiffuseR/blob/98020e28dce5fd8cbabd497eb7fbf99be3ec0e2e/configure.ac&#34; target=&#34;_blank&#34;&gt;configure.ac&lt;/a&gt; file.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;The aphylo [configure.ac]() file.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>
