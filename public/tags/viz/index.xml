<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Viz on GGVY</title>
    <link>/tags/viz/</link>
    <description>Recent content in Viz on GGVY</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2016 George G. Vega Yon</copyright>
    <lastBuildDate>Fri, 08 Dec 2017 00:00:00 +0000</lastBuildDate>
    <atom:link href="/tags/viz/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Visualizing Phylogenetic Trees with R and jsPhyloSVG</title>
      <link>/post/visualizing-phylogenetic-trees-with-r-and-jsphylosvg/</link>
      <pubDate>Fri, 08 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/visualizing-phylogenetic-trees-with-r-and-jsphylosvg/</guid>
      <description>&lt;script src=&#34;/rmarkdown-libs/htmlwidgets/htmlwidgets.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;/rmarkdown-libs/jsphylosvg/jsphylosvg-min.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;/rmarkdown-libs/jsphylosvg/raphael-min.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;/rmarkdown-libs/jsphylosvg/yui-min.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;/rmarkdown-libs/jsPhyloSVG-binding/jsPhyloSVG.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;During the last year I’ve been working on a daily basis with &lt;a href=&#34;../publication/aphylo/&#34;&gt;phylogenetic trees&lt;/a&gt;, objects that in graph jargon are called Directed Acyclic Graphs. While R does have some cool packages out there to visualize these–including &lt;a href=&#34;https://zachcp.github.io/phylocanvas/&#34;&gt;phylocanvas&lt;/a&gt; which looks great!–I wanted to tryout &lt;a href=&#34;http://www.jsphylosvg.com&#34;&gt;jsPhyloSVG&lt;/a&gt;, and moreover, to learn how to use &lt;a href=&#34;http://www.htmlwidgets.org&#34;&gt;htmlwidgets&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;So, after a week-long process of playing with JavaScript, of which I had no prior knowledge (so thank you &lt;a href=&#34;https://w3schools.com&#34;&gt;W3shools&lt;/a&gt;)!, and hours of head-scratching, I created this R package, &lt;a href=&#34;https://USCBiostats.github.io/jsPhyloSVG&#34;&gt;jsPhyloSVG&lt;/a&gt; that provides an htmlwidget for the library of the same name. An example follows&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# I&amp;#39;ll be using the ape package to simulate a tree
library(ape)
# You can get it from github USCBiostats/jsPhyloSVG
library(jsPhyloSVG)

# A random phylogenetic tree with 50 tips
tree &amp;lt;- rtree(50)

jsPhyloSVG(write.tree(tree))&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;htmlwidget-1&#34; style=&#34;width:576px;height:480px;&#34; class=&#34;jsPhyloSVG html-widget&#34;&gt;&lt;/div&gt;
&lt;script type=&#34;application/json&#34; data-for=&#34;htmlwidget-1&#34;&gt;{&#34;x&#34;:{&#34;tree&#34;:&#34;((((t42:0.06164457602,t12:0.8180190395):0.9365026811,((((t46:0.8872811985,t18:0.2442051622):0.05846408405,(t45:0.103828141,t31:0.3593903473):0.7426412788):0.5980824926,t17:0.3825574517):0.6083812208,(t48:0.07718362426,(((t23:0.167053587,t37:0.1261179752):0.7458510986,t6:0.9474354652):0.4349117738,(t50:0.7063381786,t8:0.4962021697):0.9406450125):0.1210038015):0.7206946658):0.2086854116):0.2198985894,((t21:0.2193838274,((t13:0.5840207564,t33:0.2736268432):0.3320097523,t47:0.1042833098):0.3601851477):0.4512686338,t25:0.4689089167):0.9308448818):0.04086005269,(((((t40:0.1956768476,t26:0.7943518062):0.1782792471,((t22:0.376651922,t49:0.02243229607):0.3668012598,(((t34:0.664548245,t3:0.1619326761):0.987456419,t11:0.8452820375):0.4688073481,(t16:0.1818585785,t29:0.232394211):0.4287885327):0.7964651871):0.5320081892):0.5300812169,((((t19:0.7511951746,t2:0.204252976):0.4938647044,t7:0.3556977008):0.3586013827,(t38:0.8039303906,(t32:0.9500118557,t43:0.6342438555):0.1515436959):0.7556200498):0.06952625257,(t39:0.9166283135,(t5:0.389964974,t14:0.06258801115):0.1248964793):0.2041574172):0.5678209993):0.3246593522,t30:0.7534215476):0.03259838023,((t36:0.9918274684,((t28:0.5589617616,t15:0.8905687227):0.1676856377,t10:0.7602554555):0.8512989033):0.8380841515,(((t41:0.2416828792,(t9:0.7206978209,t24:0.2196376026):0.6739168777):0.155479881,t20:0.8713164511):0.52036779,(t1:0.6211066761,(t35:0.7013573709,((t44:0.8949779936,t27:0.373667527):0.6651984421,t4:0.3912915958):0.9155155858):0.3391307804):0.4781178217):0.498043109):0.8864928086):0.3566122628);&#34;,&#34;layout&#34;:&#34;circular&#34;},&#34;evals&#34;:[],&#34;jsHooks&#34;:[]}&lt;/script&gt;
&lt;p&gt;You can take a look at the project repo &lt;a href=&#34;https://github.com/USCBiostats/jsPhyloSVG&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Read viz attributes from GEXF files</title>
      <link>/post/read-viz-attributes-from-gexf-files/</link>
      <pubDate>Mon, 27 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/read-viz-attributes-from-gexf-files/</guid>
      <description>&lt;p&gt;So one of the new features that I’ve working on is processing viz attributes. In the &lt;a href=&#34;https://cran.r-project.org/package=rgexf&#34;&gt;CRAN version of rgexf&lt;/a&gt;, the function &lt;code&gt;read.gexf&lt;/code&gt; only reads in non-visual attributes and the graph structure itself, which is no longer true &lt;a href=&#34;https://github.com/gvegayon/rgexf/commit/39d24409c7c641a1e62bdf518ff8ca46ea6172b5&#34;&gt;as of today&lt;/a&gt; (at least for the static viz attributes, all the other dynamic features supported by GEXF will come in the future).&lt;/p&gt;
&lt;p&gt;We start by loading the R packages and reading the “lesmiserables.gexf” file that is included in &lt;code&gt;rgexf&lt;/code&gt;. We use the &lt;code&gt;gexf.to.igraph&lt;/code&gt; function to coerce the &lt;code&gt;gexf&lt;/code&gt; object to an object of class &lt;code&gt;igraph&lt;/code&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Loading R packages
library(rgexf)
library(igraph)

# Reading and coercing into an igraph object
fn      &amp;lt;- system.file(&amp;quot;gexf-graphs&amp;quot;, &amp;quot;lesmiserables.gexf&amp;quot;, package=&amp;quot;rgexf&amp;quot;)
gexf1   &amp;lt;- read.gexf(fn)
igraph1 &amp;lt;- gexf.to.igraph(gexf1)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here comes the nice new feature. &lt;code&gt;read.gexf&lt;/code&gt; and &lt;code&gt;gexf.to.igraph&lt;/code&gt; take into account the visual attributes of the network, and we can use those with &lt;code&gt;plot.igraph&lt;/code&gt; directly without us specifying them! The only changes that I do in the next code chunk are rescaling the vertex and labels sizes (igraph automatically changes scales, which messes a bit with what we read from the GEXF object), and setting the edges to be curved and labels to be black using the &lt;code&gt;sans&lt;/code&gt; font family, and this is what we get&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# We set the mai = c(0,0,0,0) so we have more space for our plot
oldpar &amp;lt;- par(no.readonly = TRUE)
par(mai = rep(0,4))
plot(igraph1,
     vertex.size        = V(igraph1)$size/2,
     vertex.label.cex   = V(igraph1)$size/50,
     vertex.label.color = &amp;quot;black&amp;quot;,
     edge.curved        = TRUE,
     vertex.label.family = &amp;quot;sans&amp;quot;
     )&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2017-11-27-read-viz-attributes-from-gexf-files_files/figure-html/igraph-plot-1.svg&#34; width=&#34;576&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;par(oldpar)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And to make sure we are getting the same output, we can take a look at how the &lt;code&gt;plot.gexf&lt;/code&gt; function draws our GEXF graph.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;plot(
  gexf1,
  copy.only = TRUE,
  dir       = &amp;quot;../../static/post/read-viz-attributes-from-gexf-files/viz&amp;quot;
  )&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## GEXF graph successfully written at:
## /home/george/Documents/website/static/post/read-viz-attributes-from-gexf-files/viz/network.gexf&lt;/code&gt;&lt;/pre&gt;
&lt;iframe width=&#34;100%&#34; height=&#34;400&#34; src=&#34;viz/index.html&#34;&gt;
&lt;/iframe&gt;
&lt;p&gt;As expected, the same result.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Some notes on my first shiny app</title>
      <link>/post/some-notes-on-my-first-shiny-app/</link>
      <pubDate>Thu, 16 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/some-notes-on-my-first-shiny-app/</guid>
      <description>&lt;p&gt;Since there are plenty of examples out there telling you how to get started with shiny (like &lt;a href=&#34;https://shiny.rstudio.com/tutorial/&#34; target=&#34;_blank&#34;&gt;Rstudio&amp;rsquo;s&lt;/a&gt;, or &lt;a href=&#34;https://www.google.com/search?newwindow=1&amp;amp;ei=Og8OWpG4CYOUjwO9tZzABw&amp;amp;q=shiny+tutorial&amp;amp;oq=shiny+tutorial&amp;amp;gs_l=psy-ab.3..0i71k1l4.0.0.0.38217.0.0.0.0.0.0.0.0..0.0....0...1..64.psy-ab..0.0.0....0.v793tYPbUcw&#34; target=&#34;_blank&#34;&gt;Google&lt;/a&gt;), I will focus on telling some of the stuff that I did learned and may not be obvious at first, including some of the mistakes I made.&lt;/p&gt;

&lt;p&gt;Before start, I just want to stress that I&amp;rsquo;m writing this after my first shiny app, you&amp;rsquo;ve been warned! Here it goes:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Use the &amp;ldquo;two-file&amp;rdquo; method&lt;/strong&gt; Instead of putting everything, UI and Server, in a single &lt;code&gt;app.R&lt;/code&gt; file, create two separate files &lt;code&gt;server.R&lt;/code&gt; and &lt;code&gt;ui.R&lt;/code&gt; (see &lt;a href=&#34;http://shiny.rstudio.com/articles/two-file.html&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;). This is not hard to figure out, but is not the first thing that you see when you create a shiny app from Rstudio. The reason why is very simple, as your project grows, you want to have it organized using several Rscripts rather than a single big R file that&amp;rsquo;s called &lt;code&gt;app.R&lt;/code&gt;. That&amp;rsquo;s OK but not very friendly to maintain. This takes us to the next point.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Use separate R files for more complex functions&lt;/strong&gt; If you have other functions that you would like to run with your app, either use the &lt;code&gt;global.R&lt;/code&gt; script, which will be run automatically, or just source your file like &lt;code&gt;source(&amp;quot;extra-functions.R&amp;quot;)&lt;/code&gt; (see &lt;a href=&#34;https://shiny.rstudio.com/articles/modules.html&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;). Again, this makes code maintenance easier.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Make sure all the packages that you need are installed&lt;/strong&gt; You can either keep the source version of such packages as a sub directory, or follow a more simple approach such as using &lt;code&gt;require&lt;/code&gt;, e.g.:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;if (!require(somepackage)) {
  install.packages(&amp;quot;somepackage&amp;quot;)
  library(somepackage)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is especially important when deploying shiny in a in-house server as the &amp;ldquo;shiny user&amp;rdquo; has to have access to those R packages. You can always try to install them globally too so that all users in the server have access to the required packages.&lt;/p&gt;

&lt;p&gt;More important, &lt;font color=&#34;red&#34;&gt;&lt;b&gt;make sure that you have &lt;code&gt;shiny&lt;/code&gt; and &lt;code&gt;rmarkdown&lt;/code&gt; installed and available system-wide!&lt;/b&gt;&lt;/font&gt; I spent roughly half an hour figuring out why my shiny apps didn&amp;rsquo;t started once I started the server in our machine.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Nested apps&lt;/strong&gt; If you want to include several apps under the same folder in your &lt;code&gt;/srv/shiny-server&lt;/code&gt; folder (which is where the shiny apps live), e.g. &lt;code&gt;my-apps&lt;/code&gt;, avoid including &lt;code&gt;R&lt;/code&gt; or &lt;code&gt;Rmd&lt;/code&gt; files in that folder, shiny will try to run those as shiny apps and, for some reason that I&amp;rsquo;m not aware of, links that go from html pages in that folder to your sub directory apps will not work.&lt;/p&gt;

&lt;p&gt;For example, suppose that we have two apps, &lt;code&gt;shinyApp1&lt;/code&gt; and &lt;code&gt;shinyApp2&lt;/code&gt; and we want to keep those in the same folder &lt;code&gt;your-site&lt;/code&gt;, and you have a nice front-end website allowing you to access to such apps with relative links in the form of &lt;code&gt;&amp;lt;a href=&amp;quot;shinyApp1&amp;quot;&amp;gt;Go to shinyApp1&amp;lt;/a&amp;gt;&lt;/code&gt;, you&amp;rsquo;ll just need to &lt;strong&gt;include the &lt;code&gt;index.html&lt;/code&gt;&lt;/strong&gt; of your website (which you can create with &lt;code&gt;rmarkdown&lt;/code&gt;). The &lt;strong&gt;following would be wrong&lt;/strong&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;+---/srv/shiny-server
|   +---/you-site
|       +---index.html
|       +---index.Rmd    # THIS SHOULDN&#39;T BE HERE!
|       +---shinyApp1
|           +---server.R
|           +---ui.R
|       +---shinyApp2
|           +---server.R
|           +---ui.R
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This would result in having a broken link in your &lt;code&gt;index.html&lt;/code&gt; file. You should do this instead, remove the Rmd file from the &lt;code&gt;your-site&lt;/code&gt; folder:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;+---/srv/shiny-server
|   +---/you-site
|       +---index.html
|       +---shinyApp1
|           +---server.R
|           +---ui.R
|       +---shinyApp2
|           +---server.R
|           +---ui.R
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This example was adapted from &lt;a href=&#34;http://docs.rstudio.com/shiny-server/#host-a-directory-of-applications&#34; target=&#34;_blank&#34;&gt;Section 2.7.1&lt;/a&gt; from the Shiny&amp;rsquo;s Admin guide.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Read about Reactivity&lt;/strong&gt; This is a fundamental thing to understand in Shiny, moreover, the key function to review is &lt;code&gt;reactive&lt;/code&gt;, which allows you to create intermediate points (reactive conductors) between your input and output data in the shiny app. Just to give you an idea, here is an (adapted) example that I find useful from the &lt;a href=&#34;http://shiny.rstudio.com/articles/#reactivity&#34; target=&#34;_blank&#34;&gt;shiny documentation&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;This will work&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# A function that will be called from within the server
fib &amp;lt;- function(n) ifelse(n&amp;lt;3, 1, fib(n-1)+fib(n-2))
    
server &amp;lt;- function(input, output) {
      
  # Calling your fancy fib function, notice the
  #
  #     reactive({ ... })
  #
  # wrapper.
  currentFib         &amp;lt;- reactive({ fib(as.numeric(input$n)) })
    
  # You use it as a function later on.
  output$nthValue    &amp;lt;- renderText({ currentFib() })
  output$nthValueInv &amp;lt;- renderText({ 1 / currentFib() })
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This won&amp;rsquo;t work, since currentFib is not in the &amp;ldquo;reactive&amp;rdquo; world!&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;server &amp;lt;- function(input, output) {
  # Will give error
  currentFib      &amp;lt;- fib(as.numeric(input$n))
  output$nthValue &amp;lt;- renderText({ currentFib })
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;For my next steps, I expect to be able to include a shiny app in the R packages &lt;code&gt;aphylo&lt;/code&gt; (which is not on CRAN yet, but available &lt;a href=&#34;https://github.com/USCBiostats/aphylo&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;) and &lt;code&gt;rgexf&lt;/code&gt; (which it is on &lt;a href=&#34;https://cran.r-project.org/package=rgexf&#34; target=&#34;_blank&#34;&gt;CRAN&lt;/a&gt;, but is currently on a major update &lt;a href=&#34;https://github.com/gvegayon/rgexf&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;I recommend taking a look at &lt;a href=&#34;https://bookdown.org/yihui/bookdown/web-pages-and-shiny-apps.html&#34; target=&#34;_blank&#34;&gt;this section&lt;/a&gt; from the &lt;a href=&#34;https://bookdown.org/yihui/bookdown&#34; target=&#34;_blank&#34;&gt;bookdown&lt;/a&gt; that talks about how to include shiny apps within web pages.&lt;/p&gt;

&lt;p&gt;Finally, if you are interested, you can take a look at the shiny app &lt;a href=&#34;https://gvegayon.shinyapps.io/predq/&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt; and at the code &lt;a href=&#34;https://github.com/gvegayon/predq&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Reboot of rgexf</title>
      <link>/post/reboot-of-rgexf/</link>
      <pubDate>Wed, 08 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/reboot-of-rgexf/</guid>
      <description>&lt;p&gt;The &lt;a href=&#34;https://github.com/gvegayon/rgexf&#34;&gt;rgexf&lt;/a&gt; R package has been around a couple of years now, but without much going on on CRAN (my bad!). In this post I’ll show how to use the new version (on development and soon the be shipped to &lt;a href=&#34;https://cran.r-project.org/package=rgexf&#34;&gt;CRAN&lt;/a&gt;) together with the &lt;a href=&#34;https://github.com/USCCANA/netdiffuseR&#34;&gt;netdiffuseR&lt;/a&gt; R package to visualize a random diffusion process.&lt;/p&gt;
&lt;p&gt;First, we load all the packages that we will be using&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Loading the relevant packages
library(igraph, quietly = TRUE)
library(rgexf, quietly = TRUE)
library(netdiffuseR, quietly = TRUE)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next, we simulate a random diffusion network, in this case, a small-world network with 200 nodes spanning 20 time periods.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# A random diffusion network
set.seed(122)
net &amp;lt;- rdiffnet(n = 200, t=20, seed.graph = &amp;quot;small-world&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, we get the parameters ready, in this case, position using the function &lt;code&gt;layout_nicely&lt;/code&gt; from the igraph package, and colors using the Time of Adoption (toa)&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Setting viz attributes
pos &amp;lt;- cbind(layout_nicely(diffnet_to_igraph(net)[[1]]), 0)

# Coloring according to time of adoption. White ones are not
# adopters.
col &amp;lt;- diffnet.toa(net)
col &amp;lt;- col/20
col &amp;lt;- colorRamp(blues9, alpha = TRUE)(col)
col[is.na(col[,1]),1:3] &amp;lt;- 255
col[,4] &amp;lt;- .5&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Finally, we create the GEXF object and call the plot function. In this case we are using &lt;a href=&#34;https://github.com/raphv/gexf-js&#34;&gt;gexf-js&lt;/a&gt; (sigma-js will return in the future). Also, notice that we are only copying the files; the default behavior is to copy the files by setting &lt;code&gt;copy.only = TRUE&lt;/code&gt; and start the server using the &lt;a href=&#34;https://cran.r-project.org/package=servr&#34;&gt;servr&lt;/a&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Creating the gexf object
gf &amp;lt;- igraph.to.gexf(
  diffnet_to_igraph(net)[[1]],
  nodesVizAtt = list(
    color    = col,
    position = pos
    )
  )

# Plotting using gexf-js
plot(
  gf,
  edgeWidthFactor = .1,
  copy.only = TRUE,
  dir       = &amp;quot;../../static/post/reboot-of-rgexf/viz&amp;quot;
  )&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## GEXF graph successfully written at:
## /home/george/Documents/website/static/post/reboot-of-rgexf/viz/network.gexf&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can take a look at resulting website &lt;a href=&#34;viz&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;div id=&#34;session-info&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Session info&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;devtools::session_info()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Session info -------------------------------------------------------------&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  setting  value                       
##  version  R version 3.4.4 (2018-03-15)
##  system   x86_64, linux-gnu           
##  ui       X11                         
##  language en_US                       
##  collate  en_US.UTF-8                 
##  tz       America/Los_Angeles         
##  date     2018-06-18&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Packages -----------------------------------------------------------------&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  package        * version   date       source        
##  backports        1.1.2     2017-12-13 cran (@1.1.2) 
##  base           * 3.4.4     2018-03-16 local         
##  blogdown         0.6       2018-04-18 CRAN (R 3.4.4)
##  bookdown         0.7       2018-02-18 CRAN (R 3.4.3)
##  boot             1.3-20    2017-07-30 CRAN (R 3.4.1)
##  coda             0.19-1    2016-12-08 CRAN (R 3.4.0)
##  codetools        0.2-15    2016-10-05 CRAN (R 3.3.1)
##  colorspace       1.3-2     2016-12-14 CRAN (R 3.4.0)
##  compiler         3.4.4     2018-03-16 local         
##  datasets       * 3.4.4     2018-03-16 local         
##  devtools         1.13.5    2018-02-18 CRAN (R 3.4.3)
##  digest           0.6.15    2018-01-28 cran (@0.6.15)
##  evaluate         0.10.1    2017-06-24 CRAN (R 3.4.0)
##  ggplot2          2.2.1     2016-12-30 CRAN (R 3.4.3)
##  graphics       * 3.4.4     2018-03-16 local         
##  grDevices      * 3.4.4     2018-03-16 local         
##  grid             3.4.4     2018-03-16 local         
##  gridExtra        2.3       2017-09-09 CRAN (R 3.4.4)
##  gtable           0.2.0     2016-02-26 CRAN (R 3.4.0)
##  htmltools        0.3.6     2017-04-28 CRAN (R 3.4.0)
##  httpuv           1.4.3     2018-05-10 CRAN (R 3.4.4)
##  igraph         * 1.2.1     2018-03-10 CRAN (R 3.4.3)
##  knitr            1.20      2018-02-20 CRAN (R 3.4.3)
##  later            0.7.3     2018-06-08 CRAN (R 3.4.4)
##  lattice          0.20-35   2017-03-25 CRAN (R 3.3.3)
##  lazyeval         0.2.1     2017-10-29 CRAN (R 3.4.2)
##  magrittr         1.5       2014-11-22 CRAN (R 3.4.0)
##  MASS             7.3-50    2018-04-30 CRAN (R 3.4.4)
##  MatchIt          3.0.2     2018-01-09 CRAN (R 3.4.3)
##  Matrix           1.2-14    2018-04-09 CRAN (R 3.4.4)
##  memoise          1.1.0     2017-04-21 CRAN (R 3.4.0)
##  methods        * 3.4.4     2018-03-16 local         
##  munsell          0.5.0     2018-06-12 CRAN (R 3.4.4)
##  netdiffuseR    * 1.20.0    2018-06-07 CRAN (R 3.4.4)
##  network          1.13.0.1  2018-04-02 CRAN (R 3.4.4)
##  networkDynamic   0.9.0     2016-01-15 CRAN (R 3.4.0)
##  pillar           1.2.3     2018-05-25 CRAN (R 3.4.4)
##  pkgconfig        2.0.1     2017-03-21 CRAN (R 3.4.0)
##  plyr             1.8.4     2016-06-08 CRAN (R 3.4.0)
##  promises         1.0.1     2018-04-13 CRAN (R 3.4.4)
##  R6               2.2.2     2017-06-17 CRAN (R 3.4.4)
##  Rcpp             0.12.17   2018-05-18 CRAN (R 3.4.4)
##  rgexf          * 0.16.0    2018-02-05 local         
##  rlang            0.2.1     2018-05-30 CRAN (R 3.4.4)
##  rmarkdown        1.10      2018-06-11 CRAN (R 3.4.4)
##  rprojroot        1.3-2     2018-01-03 cran (@1.3-2) 
##  scales           0.5.0     2017-08-24 CRAN (R 3.4.1)
##  servr            0.10      2018-05-30 CRAN (R 3.4.4)
##  sna              2.4       2016-08-08 CRAN (R 3.4.0)
##  SparseM          1.77      2017-04-23 CRAN (R 3.4.0)
##  statnet.common   4.1.2     2018-06-05 CRAN (R 3.4.4)
##  stats          * 3.4.4     2018-03-16 local         
##  stringi          1.2.3     2018-06-12 CRAN (R 3.4.4)
##  stringr          1.3.1     2018-05-10 CRAN (R 3.4.4)
##  tibble           1.4.2     2018-01-22 cran (@1.4.2) 
##  tools            3.4.4     2018-03-16 local         
##  utils          * 3.4.4     2018-03-16 local         
##  viridis          0.5.1     2018-03-29 CRAN (R 3.4.3)
##  viridisLite      0.3.0     2018-02-01 cran (@0.3.0) 
##  withr            2.1.2     2018-03-15 cran (@2.1.2) 
##  xfun             0.2       2018-06-16 CRAN (R 3.4.4)
##  XML              3.98-1.11 2018-04-16 CRAN (R 3.4.4)
##  yaml             2.1.19    2018-05-01 CRAN (R 3.4.4)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;last-updated&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Last updated&lt;/h2&gt;
&lt;p&gt;This post was last updated on 2017-11-13 to reflect a small change in &lt;code&gt;rgexf&lt;/code&gt; that makes it easier to process colors and positions.&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>
