<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Rstats on GGVY</title>
    <link>/tags/rstats/</link>
    <description>Recent content in Rstats on GGVY</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2016 George G. Vega Yon</copyright>
    <lastBuildDate>Thu, 25 Jul 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/tags/rstats/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Working with sparse matrices in C&#43;&#43; (part 2)</title>
      <link>/post/working-with-sparse-matrices-in-cpp-part2/</link>
      <pubDate>Thu, 25 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>/post/working-with-sparse-matrices-in-cpp-part2/</guid>
      <description>Last time I talked about this, iterators in armadillo were fast only in the constext of colum-major access, since data is stored like that. Today, the developers of armadillo, Dr Conrad Sanderson and Dr Ryan Curtin, have work furiously on adding new features to the header-only library, which has lead me to update the results of a benchmark I wrote on 2018:
#include &amp;lt;RcppArmadillo.h&amp;gt; // [[Rcpp::depends(RcppArmadillo)]] using namespace Rcpp; // Column-major method iterator (default) // [[Rcpp::export]] arma::vec sp_iterate(arma::sp_mat x) { arma::vec ans(x.</description>
    </item>
    
    <item>
      <title>Working with sparse matrices in C&#43;&#43;</title>
      <link>/post/working-with-sparse-matrices-in-cpp/</link>
      <pubDate>Tue, 16 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/working-with-sparse-matrices-in-cpp/</guid>
      <description>Working with sparse matrices is a big part of my day. Social networks are inherently sparse, so sparse matrices are the best buds you can get when representing large networks as adjacency matrices.1 As so, I usually find myself trying to take advantage of their structure as, contrasting dense matrices, we don’t need to write nested for(i...) for (j...) loops to work with them, instead, sometimes all what we want is just to extract/work with its non-zero elements.</description>
    </item>
    
    <item>
      <title>Visualizing Phylogenetic Trees with R and jsPhyloSVG</title>
      <link>/post/visualizing-phylogenetic-trees-with-r-and-jsphylosvg/</link>
      <pubDate>Fri, 08 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/visualizing-phylogenetic-trees-with-r-and-jsphylosvg/</guid>
      <description>During the last year I’ve been working on a daily basis with phylogenetic trees, objects that in graph jargon are called Directed Acyclic Graphs. While R does have some cool packages out there to visualize these–including phylocanvas which looks great!–I wanted to tryout jsPhyloSVG, and moreover, to learn how to use htmlwidgets.
So, after a week-long process of playing with JavaScript, of which I had no prior knowledge (so thank you W3shools)!</description>
    </item>
    
    <item>
      <title>Read viz attributes from GEXF files</title>
      <link>/post/read-viz-attributes-from-gexf-files/</link>
      <pubDate>Mon, 27 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/read-viz-attributes-from-gexf-files/</guid>
      <description>So one of the new features that I’ve working on is processing viz attributes. In the CRAN version of rgexf, the function read.gexf only reads in non-visual attributes and the graph structure itself, which is no longer true as of today (at least for the static viz attributes, all the other dynamic features supported by GEXF will come in the future).
We start by loading the R packages and reading the “lesmiserables.</description>
    </item>
    
    <item>
      <title>Some notes on my first shiny app</title>
      <link>/post/some-notes-on-my-first-shiny-app/</link>
      <pubDate>Thu, 16 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/some-notes-on-my-first-shiny-app/</guid>
      <description>Since there are plenty of examples out there telling you how to get started with shiny (like Rstudio&amp;rsquo;s, or Google), I will focus on telling some of the stuff that I did learned and may not be obvious at first, including some of the mistakes I made.
Before start, I just want to stress that I&amp;rsquo;m writing this after my first shiny app, you&amp;rsquo;ve been warned! Here it goes:
 Use the &amp;ldquo;two-file&amp;rdquo; method Instead of putting everything, UI and Server, in a single app.</description>
    </item>
    
    <item>
      <title>Profiling Rcpp</title>
      <link>/post/profiling-rcpp/</link>
      <pubDate>Tue, 14 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/profiling-rcpp/</guid>
      <description> Install libuwind
$ wget http://download.savannah.nongnu.org/releases/libunwind/libunwind-1.2.tar.gz &amp;amp;&amp;amp; \ tar -xf libunwind-1.2.tar.gz &amp;amp;&amp;amp; cd libunwind-1.2; \ ./configure; sudo make; sudo make install Install google-perftools
$ git clone https://github.com/gperftools/gperftools $   </description>
    </item>
    
    <item>
      <title>New versions of ABCoptim and googlePublicData on CRAN</title>
      <link>/post/new-versions-of-abcoptim-and-googlepublicdata-on-cran/</link>
      <pubDate>Wed, 08 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/new-versions-of-abcoptim-and-googlepublicdata-on-cran/</guid>
      <description>Finally, after a long wait, the R packages googlePublicData (more than 2 years since the last update!) and ABCoptim (roughly a year since the last update) have new versions on CRAN.
The first just got an update that fixed some nasty bugs that were evident once you upload the data to Google Public Data Explorer, and some other new internal stuff making the code nicer and easier to maintain. The later also got some small updates, a couple of new parameters matching optim, and new methods for printing and plotting the results.</description>
    </item>
    
    <item>
      <title>Reboot of rgexf</title>
      <link>/post/reboot-of-rgexf/</link>
      <pubDate>Wed, 08 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/reboot-of-rgexf/</guid>
      <description>The rgexf R package has been around a couple of years now, but without much going on on CRAN (my bad!). In this post I’ll show how to use the new version (on development and soon the be shipped to CRAN) together with the netdiffuseR R package to visualize a random diffusion process.
First, we load all the packages that we will be using
# Loading the relevant packages library(igraph, quietly = TRUE) library(rgexf, quietly = TRUE) library(netdiffuseR, quietly = TRUE) Next, we simulate a random diffusion network, in this case, a small-world network with 200 nodes spanning 20 time periods.</description>
    </item>
    
    <item>
      <title>Environments in R Rock</title>
      <link>/post/environments-in-r-rock/</link>
      <pubDate>Mon, 02 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/environments-in-r-rock/</guid>
      <description>Last week I found myself working on netdiffuseR trying to establish nice defaults for some plotting functions with the following goals:
Make the code easy to maintain: So if I need to change defaults I just change a few lines and that works for all plot functions,
 Make the code easy to see in the manual (help) file: So is easier to the user to focus on the main features of a plot rather than looking at a large description of a function with lots of parameters and lots of defaults, and</description>
    </item>
    
    <item>
      <title>Sistema de Pensiones en Chile</title>
      <link>/post/sistema-de-pensiones-en-chile/</link>
      <pubDate>Fri, 29 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/sistema-de-pensiones-en-chile/</guid>
      <description>Con todo el tema del plebiscito anti AFP (porque no es más que eso), y varios correos que he recibido en los últimos años con personas preguntándome acerca de como funciona el sistema de pensiones (que me parece genial!), me decidí a escribir este pequeño post con algunas de las ideas que tengo al respecto. Y qué mejor forma que partir por los mitos sobre el sistema!
Mitos sobre el sistema de pensiones http://www.</description>
    </item>
    
    <item>
      <title>Yet another plot of R&#39;s colors()</title>
      <link>/post/yet-another-plot-of-r-s-colors/</link>
      <pubDate>Fri, 15 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/yet-another-plot-of-r-s-colors/</guid>
      <description> I know there are plenty of these online, but I just thought about having my own for quick reference…
ncols &amp;lt;- ceiling(sqrt(length(colors())))^2 dat &amp;lt;- matrix(1:ncols, sqrt(ncols)) image(dat, col = colors()[1:ncols]) pos &amp;lt;- seq(0, 1, length.out = sqrt(ncols)) pos &amp;lt;- lapply(pos, function(x) cbind(x, pos)) pos &amp;lt;- do.call(rbind, pos) ncols &amp;lt;- length(colors()) text(x=pos[1:ncols,2], y=pos[1:ncols,1], labels = 1:ncols, cex=.75, srt=60) </description>
    </item>
    
    <item>
      <title>Setting up optional OpenMP support with RcppArmadillo</title>
      <link>/post/setting-up-optional-openmp-support-with-rcpparmadillo/</link>
      <pubDate>Tue, 29 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/setting-up-optional-openmp-support-with-rcpparmadillo/</guid>
      <description>Setting up an R package that supports OpenMP can be a bit awkward. While systems like Ubuntu with g++ have straight forward support for -fopenmp flags, the same may not be true un MacOS&amp;rsquo;s clang, since the latter is not shipped with it.
In order to solve this, it is necesary to have different src/Makevars file depending on whether the compiler supports OpenMP or not. This can be solved using a configure file, more over, autoconf.</description>
    </item>
    
  </channel>
</rss>